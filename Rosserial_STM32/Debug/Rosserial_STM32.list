
Rosserial_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f88  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08005110  08005110  00015110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005350  08005350  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08005350  08005350  00015350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005358  08005358  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005358  08005358  00015358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005360  08005360  00015360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08005364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a8c  2000008c  080053f0  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b18  080053f0  00020b18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd68  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002264  00000000  00000000  0002de24  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000988  00000000  00000000  00030088  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008b8  00000000  00000000  00030a10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000221a6  00000000  00000000  000312c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008478  00000000  00000000  0005346e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c7dcf  00000000  00000000  0005b8e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001236b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a20  00000000  00000000  00123730  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000008c 	.word	0x2000008c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080050f8 	.word	0x080050f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000090 	.word	0x20000090
 80001c4:	080050f8 	.word	0x080050f8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	0a5a      	lsrs	r2, r3, #9
 80004e8:	490f      	ldr	r1, [pc, #60]	; (8000528 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80004ea:	fba1 1202 	umull	r1, r2, r1, r2
 80004ee:	09d2      	lsrs	r2, r2, #7
 80004f0:	490e      	ldr	r1, [pc, #56]	; (800052c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80004f2:	fb01 f202 	mul.w	r2, r1, r2
 80004f6:	1a9b      	subs	r3, r3, r2
 80004f8:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	0a5b      	lsrs	r3, r3, #9
 8000500:	4a09      	ldr	r2, [pc, #36]	; (8000528 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000502:	fba2 2303 	umull	r2, r3, r2, r3
 8000506:	09db      	lsrs	r3, r3, #7
 8000508:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	441a      	add	r2, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	68fa      	ldr	r2, [r7, #12]
 800051a:	601a      	str	r2, [r3, #0]
}
 800051c:	bf00      	nop
 800051e:	3714      	adds	r7, #20
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr
 8000528:	00044b83 	.word	0x00044b83
 800052c:	3b9aca00 	.word	0x3b9aca00

08000530 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2200      	movs	r2, #0
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4618      	mov	r0, r3
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
	...

08000554 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	4a04      	ldr	r2, [pc, #16]	; (8000570 <_ZN3ros3MsgC1Ev+0x1c>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4618      	mov	r0, r3
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	08005320 	.word	0x08005320

08000574 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
      data()
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	4618      	mov	r0, r3
 8000580:	f7ff ffe8 	bl	8000554 <_ZN3ros3MsgC1Ev>
 8000584:	4a06      	ldr	r2, [pc, #24]	; (80005a0 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	3304      	adds	r3, #4
 800058e:	4618      	mov	r0, r3
 8000590:	f7ff ffce 	bl	8000530 <_ZN3ros4TimeC1Ev>
    {
    }
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	4618      	mov	r0, r3
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	08005308 	.word	0x08005308

080005a4 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	6859      	ldr	r1, [r3, #4]
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	683a      	ldr	r2, [r7, #0]
 80005ba:	4413      	add	r3, r2
 80005bc:	b2ca      	uxtb	r2, r1
 80005be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	0a19      	lsrs	r1, r3, #8
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	3301      	adds	r3, #1
 80005ca:	683a      	ldr	r2, [r7, #0]
 80005cc:	4413      	add	r3, r2
 80005ce:	b2ca      	uxtb	r2, r1
 80005d0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	0c19      	lsrs	r1, r3, #16
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	3302      	adds	r3, #2
 80005dc:	683a      	ldr	r2, [r7, #0]
 80005de:	4413      	add	r3, r2
 80005e0:	b2ca      	uxtb	r2, r1
 80005e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	0e19      	lsrs	r1, r3, #24
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	3303      	adds	r3, #3
 80005ee:	683a      	ldr	r2, [r7, #0]
 80005f0:	4413      	add	r3, r2
 80005f2:	b2ca      	uxtb	r2, r1
 80005f4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	3304      	adds	r3, #4
 80005fa:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	6899      	ldr	r1, [r3, #8]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	683a      	ldr	r2, [r7, #0]
 8000604:	4413      	add	r3, r2
 8000606:	b2ca      	uxtb	r2, r1
 8000608:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	689b      	ldr	r3, [r3, #8]
 800060e:	0a19      	lsrs	r1, r3, #8
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	3301      	adds	r3, #1
 8000614:	683a      	ldr	r2, [r7, #0]
 8000616:	4413      	add	r3, r2
 8000618:	b2ca      	uxtb	r2, r1
 800061a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	689b      	ldr	r3, [r3, #8]
 8000620:	0c19      	lsrs	r1, r3, #16
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	3302      	adds	r3, #2
 8000626:	683a      	ldr	r2, [r7, #0]
 8000628:	4413      	add	r3, r2
 800062a:	b2ca      	uxtb	r2, r1
 800062c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	689b      	ldr	r3, [r3, #8]
 8000632:	0e19      	lsrs	r1, r3, #24
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	3303      	adds	r3, #3
 8000638:	683a      	ldr	r2, [r7, #0]
 800063a:	4413      	add	r3, r2
 800063c:	b2ca      	uxtb	r2, r1
 800063e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	3304      	adds	r3, #4
 8000644:	60fb      	str	r3, [r7, #12]
      return offset;
 8000646:	68fb      	ldr	r3, [r7, #12]
    }
 8000648:	4618      	mov	r0, r3
 800064a:	3714      	adds	r7, #20
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr

08000654 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000654:	b480      	push	{r7}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	683a      	ldr	r2, [r7, #0]
 8000666:	4413      	add	r3, r2
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	461a      	mov	r2, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	685a      	ldr	r2, [r3, #4]
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	3301      	adds	r3, #1
 8000678:	6839      	ldr	r1, [r7, #0]
 800067a:	440b      	add	r3, r1
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	021b      	lsls	r3, r3, #8
 8000680:	431a      	orrs	r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	685a      	ldr	r2, [r3, #4]
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	3302      	adds	r3, #2
 800068e:	6839      	ldr	r1, [r7, #0]
 8000690:	440b      	add	r3, r1
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	041b      	lsls	r3, r3, #16
 8000696:	431a      	orrs	r2, r3
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	685a      	ldr	r2, [r3, #4]
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	3303      	adds	r3, #3
 80006a4:	6839      	ldr	r1, [r7, #0]
 80006a6:	440b      	add	r3, r1
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	061b      	lsls	r3, r3, #24
 80006ac:	431a      	orrs	r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	3304      	adds	r3, #4
 80006b6:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	683a      	ldr	r2, [r7, #0]
 80006bc:	4413      	add	r3, r2
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	461a      	mov	r2, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	689a      	ldr	r2, [r3, #8]
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	3301      	adds	r3, #1
 80006ce:	6839      	ldr	r1, [r7, #0]
 80006d0:	440b      	add	r3, r1
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	021b      	lsls	r3, r3, #8
 80006d6:	431a      	orrs	r2, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	689a      	ldr	r2, [r3, #8]
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	3302      	adds	r3, #2
 80006e4:	6839      	ldr	r1, [r7, #0]
 80006e6:	440b      	add	r3, r1
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	041b      	lsls	r3, r3, #16
 80006ec:	431a      	orrs	r2, r3
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	689a      	ldr	r2, [r3, #8]
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	3303      	adds	r3, #3
 80006fa:	6839      	ldr	r1, [r7, #0]
 80006fc:	440b      	add	r3, r1
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	061b      	lsls	r3, r3, #24
 8000702:	431a      	orrs	r2, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	3304      	adds	r3, #4
 800070c:	60fb      	str	r3, [r7, #12]
     return offset;
 800070e:	68fb      	ldr	r3, [r7, #12]
    }
 8000710:	4618      	mov	r0, r3
 8000712:	3714      	adds	r7, #20
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr

0800071c <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	4b03      	ldr	r3, [pc, #12]	; (8000734 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8000726:	4618      	mov	r0, r3
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	08005110 	.word	0x08005110

08000738 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	4b03      	ldr	r3, [pc, #12]	; (8000750 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8000742:	4618      	mov	r0, r3
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	08005120 	.word	0x08005120

08000754 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff fef8 	bl	8000554 <_ZN3ros3MsgC1Ev>
 8000764:	4a0b      	ldr	r2, [pc, #44]	; (8000794 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2200      	movs	r2, #0
 800076e:	809a      	strh	r2, [r3, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	4a09      	ldr	r2, [pc, #36]	; (8000798 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4a07      	ldr	r2, [pc, #28]	; (8000798 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	4a06      	ldr	r2, [pc, #24]	; (8000798 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000780:	611a      	str	r2, [r3, #16]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2200      	movs	r2, #0
 8000786:	615a      	str	r2, [r3, #20]
    {
    }
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4618      	mov	r0, r3
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	080052f0 	.word	0x080052f0
 8000798:	08005144 	.word	0x08005144

0800079c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800079c:	b580      	push	{r7, lr}
 800079e:	b088      	sub	sp, #32
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	8899      	ldrh	r1, [r3, #4]
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	683a      	ldr	r2, [r7, #0]
 80007b2:	4413      	add	r3, r2
 80007b4:	b2ca      	uxtb	r2, r1
 80007b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	889b      	ldrh	r3, [r3, #4]
 80007bc:	0a1b      	lsrs	r3, r3, #8
 80007be:	b299      	uxth	r1, r3
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	3301      	adds	r3, #1
 80007c4:	683a      	ldr	r2, [r7, #0]
 80007c6:	4413      	add	r3, r2
 80007c8:	b2ca      	uxtb	r2, r1
 80007ca:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80007cc:	69fb      	ldr	r3, [r7, #28]
 80007ce:	3302      	adds	r3, #2
 80007d0:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	689b      	ldr	r3, [r3, #8]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff fcf6 	bl	80001c8 <strlen>
 80007dc:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	683a      	ldr	r2, [r7, #0]
 80007e2:	4413      	add	r3, r2
 80007e4:	69b9      	ldr	r1, [r7, #24]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 ffc2 	bl	8001770 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80007ec:	69fb      	ldr	r3, [r7, #28]
 80007ee:	3304      	adds	r3, #4
 80007f0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	683a      	ldr	r2, [r7, #0]
 80007f6:	18d0      	adds	r0, r2, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	689b      	ldr	r3, [r3, #8]
 80007fc:	69ba      	ldr	r2, [r7, #24]
 80007fe:	4619      	mov	r1, r3
 8000800:	f004 fb32 	bl	8004e68 <memcpy>
      offset += length_topic_name;
 8000804:	69fa      	ldr	r2, [r7, #28]
 8000806:	69bb      	ldr	r3, [r7, #24]
 8000808:	4413      	add	r3, r2
 800080a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff fcd9 	bl	80001c8 <strlen>
 8000816:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000818:	69fb      	ldr	r3, [r7, #28]
 800081a:	683a      	ldr	r2, [r7, #0]
 800081c:	4413      	add	r3, r2
 800081e:	6979      	ldr	r1, [r7, #20]
 8000820:	4618      	mov	r0, r3
 8000822:	f000 ffa5 	bl	8001770 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000826:	69fb      	ldr	r3, [r7, #28]
 8000828:	3304      	adds	r3, #4
 800082a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800082c:	69fb      	ldr	r3, [r7, #28]
 800082e:	683a      	ldr	r2, [r7, #0]
 8000830:	18d0      	adds	r0, r2, r3
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	68db      	ldr	r3, [r3, #12]
 8000836:	697a      	ldr	r2, [r7, #20]
 8000838:	4619      	mov	r1, r3
 800083a:	f004 fb15 	bl	8004e68 <memcpy>
      offset += length_message_type;
 800083e:	69fa      	ldr	r2, [r7, #28]
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	4413      	add	r3, r2
 8000844:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	691b      	ldr	r3, [r3, #16]
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff fcbc 	bl	80001c8 <strlen>
 8000850:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	683a      	ldr	r2, [r7, #0]
 8000856:	4413      	add	r3, r2
 8000858:	6939      	ldr	r1, [r7, #16]
 800085a:	4618      	mov	r0, r3
 800085c:	f000 ff88 	bl	8001770 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	3304      	adds	r3, #4
 8000864:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	683a      	ldr	r2, [r7, #0]
 800086a:	18d0      	adds	r0, r2, r3
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	691b      	ldr	r3, [r3, #16]
 8000870:	693a      	ldr	r2, [r7, #16]
 8000872:	4619      	mov	r1, r3
 8000874:	f004 faf8 	bl	8004e68 <memcpy>
      offset += length_md5sum;
 8000878:	69fa      	ldr	r2, [r7, #28]
 800087a:	693b      	ldr	r3, [r7, #16]
 800087c:	4413      	add	r3, r2
 800087e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	695b      	ldr	r3, [r3, #20]
 8000884:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8000886:	68f9      	ldr	r1, [r7, #12]
 8000888:	69fb      	ldr	r3, [r7, #28]
 800088a:	683a      	ldr	r2, [r7, #0]
 800088c:	4413      	add	r3, r2
 800088e:	b2ca      	uxtb	r2, r1
 8000890:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	0a19      	lsrs	r1, r3, #8
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	3301      	adds	r3, #1
 800089a:	683a      	ldr	r2, [r7, #0]
 800089c:	4413      	add	r3, r2
 800089e:	b2ca      	uxtb	r2, r1
 80008a0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	0c19      	lsrs	r1, r3, #16
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	3302      	adds	r3, #2
 80008aa:	683a      	ldr	r2, [r7, #0]
 80008ac:	4413      	add	r3, r2
 80008ae:	b2ca      	uxtb	r2, r1
 80008b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	0e19      	lsrs	r1, r3, #24
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	3303      	adds	r3, #3
 80008ba:	683a      	ldr	r2, [r7, #0]
 80008bc:	4413      	add	r3, r2
 80008be:	b2ca      	uxtb	r2, r1
 80008c0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	3304      	adds	r3, #4
 80008c6:	61fb      	str	r3, [r7, #28]
      return offset;
 80008c8:	69fb      	ldr	r3, [r7, #28]
    }
 80008ca:	4618      	mov	r0, r3
 80008cc:	3720      	adds	r7, #32
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b08a      	sub	sp, #40	; 0x28
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
 80008da:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80008e0:	69bb      	ldr	r3, [r7, #24]
 80008e2:	683a      	ldr	r2, [r7, #0]
 80008e4:	4413      	add	r3, r2
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	b29a      	uxth	r2, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	889b      	ldrh	r3, [r3, #4]
 80008f2:	b21a      	sxth	r2, r3
 80008f4:	69bb      	ldr	r3, [r7, #24]
 80008f6:	3301      	adds	r3, #1
 80008f8:	6839      	ldr	r1, [r7, #0]
 80008fa:	440b      	add	r3, r1
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	021b      	lsls	r3, r3, #8
 8000900:	b21b      	sxth	r3, r3
 8000902:	4313      	orrs	r3, r2
 8000904:	b21b      	sxth	r3, r3
 8000906:	b29a      	uxth	r2, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 800090c:	69bb      	ldr	r3, [r7, #24]
 800090e:	3302      	adds	r3, #2
 8000910:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8000912:	69bb      	ldr	r3, [r7, #24]
 8000914:	683a      	ldr	r2, [r7, #0]
 8000916:	441a      	add	r2, r3
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	4611      	mov	r1, r2
 800091e:	4618      	mov	r0, r3
 8000920:	f000 ff44 	bl	80017ac <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000924:	69bb      	ldr	r3, [r7, #24]
 8000926:	3304      	adds	r3, #4
 8000928:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800092a:	69bb      	ldr	r3, [r7, #24]
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
 800092e:	69ba      	ldr	r2, [r7, #24]
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	4413      	add	r3, r2
 8000934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000936:	429a      	cmp	r2, r3
 8000938:	d20c      	bcs.n	8000954 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 800093a:	683a      	ldr	r2, [r7, #0]
 800093c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093e:	441a      	add	r2, r3
 8000940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000942:	3b01      	subs	r3, #1
 8000944:	6839      	ldr	r1, [r7, #0]
 8000946:	440b      	add	r3, r1
 8000948:	7812      	ldrb	r2, [r2, #0]
 800094a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800094c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094e:	3301      	adds	r3, #1
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
 8000952:	e7ec      	b.n	800092e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000954:	69ba      	ldr	r2, [r7, #24]
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	4413      	add	r3, r2
 800095a:	3b01      	subs	r3, #1
 800095c:	683a      	ldr	r2, [r7, #0]
 800095e:	4413      	add	r3, r2
 8000960:	2200      	movs	r2, #0
 8000962:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000964:	69bb      	ldr	r3, [r7, #24]
 8000966:	3b01      	subs	r3, #1
 8000968:	683a      	ldr	r2, [r7, #0]
 800096a:	441a      	add	r2, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000970:	69ba      	ldr	r2, [r7, #24]
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	4413      	add	r3, r2
 8000976:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000978:	69bb      	ldr	r3, [r7, #24]
 800097a:	683a      	ldr	r2, [r7, #0]
 800097c:	441a      	add	r2, r3
 800097e:	f107 0310 	add.w	r3, r7, #16
 8000982:	4611      	mov	r1, r2
 8000984:	4618      	mov	r0, r3
 8000986:	f000 ff11 	bl	80017ac <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800098a:	69bb      	ldr	r3, [r7, #24]
 800098c:	3304      	adds	r3, #4
 800098e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000990:	69bb      	ldr	r3, [r7, #24]
 8000992:	623b      	str	r3, [r7, #32]
 8000994:	69ba      	ldr	r2, [r7, #24]
 8000996:	693b      	ldr	r3, [r7, #16]
 8000998:	4413      	add	r3, r2
 800099a:	6a3a      	ldr	r2, [r7, #32]
 800099c:	429a      	cmp	r2, r3
 800099e:	d20c      	bcs.n	80009ba <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80009a0:	683a      	ldr	r2, [r7, #0]
 80009a2:	6a3b      	ldr	r3, [r7, #32]
 80009a4:	441a      	add	r2, r3
 80009a6:	6a3b      	ldr	r3, [r7, #32]
 80009a8:	3b01      	subs	r3, #1
 80009aa:	6839      	ldr	r1, [r7, #0]
 80009ac:	440b      	add	r3, r1
 80009ae:	7812      	ldrb	r2, [r2, #0]
 80009b0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80009b2:	6a3b      	ldr	r3, [r7, #32]
 80009b4:	3301      	adds	r3, #1
 80009b6:	623b      	str	r3, [r7, #32]
 80009b8:	e7ec      	b.n	8000994 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80009ba:	69ba      	ldr	r2, [r7, #24]
 80009bc:	693b      	ldr	r3, [r7, #16]
 80009be:	4413      	add	r3, r2
 80009c0:	3b01      	subs	r3, #1
 80009c2:	683a      	ldr	r2, [r7, #0]
 80009c4:	4413      	add	r3, r2
 80009c6:	2200      	movs	r2, #0
 80009c8:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80009ca:	69bb      	ldr	r3, [r7, #24]
 80009cc:	3b01      	subs	r3, #1
 80009ce:	683a      	ldr	r2, [r7, #0]
 80009d0:	441a      	add	r2, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80009d6:	69ba      	ldr	r2, [r7, #24]
 80009d8:	693b      	ldr	r3, [r7, #16]
 80009da:	4413      	add	r3, r2
 80009dc:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80009de:	69bb      	ldr	r3, [r7, #24]
 80009e0:	683a      	ldr	r2, [r7, #0]
 80009e2:	441a      	add	r2, r3
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	4611      	mov	r1, r2
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 fede 	bl	80017ac <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80009f0:	69bb      	ldr	r3, [r7, #24]
 80009f2:	3304      	adds	r3, #4
 80009f4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80009f6:	69bb      	ldr	r3, [r7, #24]
 80009f8:	61fb      	str	r3, [r7, #28]
 80009fa:	69ba      	ldr	r2, [r7, #24]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	4413      	add	r3, r2
 8000a00:	69fa      	ldr	r2, [r7, #28]
 8000a02:	429a      	cmp	r2, r3
 8000a04:	d20c      	bcs.n	8000a20 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8000a06:	683a      	ldr	r2, [r7, #0]
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	441a      	add	r2, r3
 8000a0c:	69fb      	ldr	r3, [r7, #28]
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	6839      	ldr	r1, [r7, #0]
 8000a12:	440b      	add	r3, r1
 8000a14:	7812      	ldrb	r2, [r2, #0]
 8000a16:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000a18:	69fb      	ldr	r3, [r7, #28]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	61fb      	str	r3, [r7, #28]
 8000a1e:	e7ec      	b.n	80009fa <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000a20:	69ba      	ldr	r2, [r7, #24]
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	4413      	add	r3, r2
 8000a26:	3b01      	subs	r3, #1
 8000a28:	683a      	ldr	r2, [r7, #0]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000a30:	69bb      	ldr	r3, [r7, #24]
 8000a32:	3b01      	subs	r3, #1
 8000a34:	683a      	ldr	r2, [r7, #0]
 8000a36:	441a      	add	r2, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000a3c:	69ba      	ldr	r2, [r7, #24]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	4413      	add	r3, r2
 8000a42:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	69ba      	ldr	r2, [r7, #24]
 8000a4c:	6839      	ldr	r1, [r7, #0]
 8000a4e:	440a      	add	r2, r1
 8000a50:	7812      	ldrb	r2, [r2, #0]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000a56:	68ba      	ldr	r2, [r7, #8]
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	6839      	ldr	r1, [r7, #0]
 8000a5e:	440b      	add	r3, r1
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	021b      	lsls	r3, r3, #8
 8000a64:	4313      	orrs	r3, r2
 8000a66:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000a68:	68ba      	ldr	r2, [r7, #8]
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	3302      	adds	r3, #2
 8000a6e:	6839      	ldr	r1, [r7, #0]
 8000a70:	440b      	add	r3, r1
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	041b      	lsls	r3, r3, #16
 8000a76:	4313      	orrs	r3, r2
 8000a78:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000a7a:	68ba      	ldr	r2, [r7, #8]
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	3303      	adds	r3, #3
 8000a80:	6839      	ldr	r1, [r7, #0]
 8000a82:	440b      	add	r3, r1
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	061b      	lsls	r3, r3, #24
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000a8c:	68ba      	ldr	r2, [r7, #8]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	3304      	adds	r3, #4
 8000a96:	61bb      	str	r3, [r7, #24]
     return offset;
 8000a98:	69bb      	ldr	r3, [r7, #24]
    }
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3728      	adds	r7, #40	; 0x28
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
	...

08000aa4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	4b03      	ldr	r3, [pc, #12]	; (8000abc <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8000aae:	4618      	mov	r0, r3
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	08005148 	.word	0x08005148

08000ac0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	4b03      	ldr	r3, [pc, #12]	; (8000ad8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8000aca:	4618      	mov	r0, r3
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	08005164 	.word	0x08005164

08000adc <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff fd34 	bl	8000554 <_ZN3ros3MsgC1Ev>
 8000aec:	4a06      	ldr	r2, [pc, #24]	; (8000b08 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2200      	movs	r2, #0
 8000af6:	711a      	strb	r2, [r3, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4a04      	ldr	r2, [pc, #16]	; (8000b0c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000afc:	609a      	str	r2, [r3, #8]
    {
    }
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4618      	mov	r0, r3
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	080052d8 	.word	0x080052d8
 8000b0c:	08005144 	.word	0x08005144

08000b10 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	683a      	ldr	r2, [r7, #0]
 8000b22:	4413      	add	r3, r2
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	7912      	ldrb	r2, [r2, #4]
 8000b28:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	689b      	ldr	r3, [r3, #8]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fb47 	bl	80001c8 <strlen>
 8000b3a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	683a      	ldr	r2, [r7, #0]
 8000b40:	4413      	add	r3, r2
 8000b42:	68b9      	ldr	r1, [r7, #8]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f000 fe13 	bl	8001770 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	3304      	adds	r3, #4
 8000b4e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	683a      	ldr	r2, [r7, #0]
 8000b54:	18d0      	adds	r0, r2, r3
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	68ba      	ldr	r2, [r7, #8]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f004 f983 	bl	8004e68 <memcpy>
      offset += length_msg;
 8000b62:	68fa      	ldr	r2, [r7, #12]
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	4413      	add	r3, r2
 8000b68:	60fb      	str	r3, [r7, #12]
      return offset;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
    }
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3710      	adds	r7, #16
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	683a      	ldr	r2, [r7, #0]
 8000b86:	4413      	add	r3, r2
 8000b88:	781a      	ldrb	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	3301      	adds	r3, #1
 8000b92:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	683a      	ldr	r2, [r7, #0]
 8000b98:	441a      	add	r2, r3
 8000b9a:	f107 030c 	add.w	r3, r7, #12
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f000 fe03 	bl	80017ac <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	3304      	adds	r3, #4
 8000baa:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	693a      	ldr	r2, [r7, #16]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	697a      	ldr	r2, [r7, #20]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d20c      	bcs.n	8000bd6 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8000bbc:	683a      	ldr	r2, [r7, #0]
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	441a      	add	r2, r3
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	3b01      	subs	r3, #1
 8000bc6:	6839      	ldr	r1, [r7, #0]
 8000bc8:	440b      	add	r3, r1
 8000bca:	7812      	ldrb	r2, [r2, #0]
 8000bcc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	617b      	str	r3, [r7, #20]
 8000bd4:	e7ec      	b.n	8000bb0 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	4413      	add	r3, r2
 8000bdc:	3b01      	subs	r3, #1
 8000bde:	683a      	ldr	r2, [r7, #0]
 8000be0:	4413      	add	r3, r2
 8000be2:	2200      	movs	r2, #0
 8000be4:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	3b01      	subs	r3, #1
 8000bea:	683a      	ldr	r2, [r7, #0]
 8000bec:	441a      	add	r2, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
     return offset;
 8000bfa:	693b      	ldr	r3, [r7, #16]
    }
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3718      	adds	r7, #24
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	4b03      	ldr	r3, [pc, #12]	; (8000c1c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8000c0e:	4618      	mov	r0, r3
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	08005188 	.word	0x08005188

08000c20 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	4b03      	ldr	r3, [pc, #12]	; (8000c38 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	0800519c 	.word	0x0800519c

08000c3c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fc84 	bl	8000554 <_ZN3ros3MsgC1Ev>
 8000c4c:	4a11      	ldr	r2, [pc, #68]	; (8000c94 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2200      	movs	r2, #0
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2200      	movs	r2, #0
 8000c62:	60da      	str	r2, [r3, #12]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2200      	movs	r2, #0
 8000c68:	611a      	str	r2, [r3, #16]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	f04f 0200 	mov.w	r2, #0
 8000c70:	615a      	str	r2, [r3, #20]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	61da      	str	r2, [r3, #28]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2200      	movs	r2, #0
 8000c82:	621a      	str	r2, [r3, #32]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2200      	movs	r2, #0
 8000c88:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	080052c0 	.word	0x080052c0

08000c98 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08a      	sub	sp, #40	; 0x28
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6859      	ldr	r1, [r3, #4]
 8000caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cac:	683a      	ldr	r2, [r7, #0]
 8000cae:	4413      	add	r3, r2
 8000cb0:	b2ca      	uxtb	r2, r1
 8000cb2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	0a19      	lsrs	r1, r3, #8
 8000cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	683a      	ldr	r2, [r7, #0]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	b2ca      	uxtb	r2, r1
 8000cc4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	0c19      	lsrs	r1, r3, #16
 8000ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cce:	3302      	adds	r3, #2
 8000cd0:	683a      	ldr	r2, [r7, #0]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	b2ca      	uxtb	r2, r1
 8000cd6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	0e19      	lsrs	r1, r3, #24
 8000cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce0:	3303      	adds	r3, #3
 8000ce2:	683a      	ldr	r2, [r7, #0]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	b2ca      	uxtb	r2, r1
 8000ce8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cec:	3304      	adds	r3, #4
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	623b      	str	r3, [r7, #32]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	6a3a      	ldr	r2, [r7, #32]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d22b      	bcs.n	8000d56 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	68da      	ldr	r2, [r3, #12]
 8000d02:	6a3b      	ldr	r3, [r7, #32]
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	4413      	add	r3, r2
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000d0c:	6939      	ldr	r1, [r7, #16]
 8000d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d10:	683a      	ldr	r2, [r7, #0]
 8000d12:	4413      	add	r3, r2
 8000d14:	b2ca      	uxtb	r2, r1
 8000d16:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	0a19      	lsrs	r1, r3, #8
 8000d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1e:	3301      	adds	r3, #1
 8000d20:	683a      	ldr	r2, [r7, #0]
 8000d22:	4413      	add	r3, r2
 8000d24:	b2ca      	uxtb	r2, r1
 8000d26:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	0c19      	lsrs	r1, r3, #16
 8000d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2e:	3302      	adds	r3, #2
 8000d30:	683a      	ldr	r2, [r7, #0]
 8000d32:	4413      	add	r3, r2
 8000d34:	b2ca      	uxtb	r2, r1
 8000d36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	0e19      	lsrs	r1, r3, #24
 8000d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3e:	3303      	adds	r3, #3
 8000d40:	683a      	ldr	r2, [r7, #0]
 8000d42:	4413      	add	r3, r2
 8000d44:	b2ca      	uxtb	r2, r1
 8000d46:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4a:	3304      	adds	r3, #4
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000d4e:	6a3b      	ldr	r3, [r7, #32]
 8000d50:	3301      	adds	r3, #1
 8000d52:	623b      	str	r3, [r7, #32]
 8000d54:	e7ce      	b.n	8000cf4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6919      	ldr	r1, [r3, #16]
 8000d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5c:	683a      	ldr	r2, [r7, #0]
 8000d5e:	4413      	add	r3, r2
 8000d60:	b2ca      	uxtb	r2, r1
 8000d62:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	691b      	ldr	r3, [r3, #16]
 8000d68:	0a19      	lsrs	r1, r3, #8
 8000d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	683a      	ldr	r2, [r7, #0]
 8000d70:	4413      	add	r3, r2
 8000d72:	b2ca      	uxtb	r2, r1
 8000d74:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	691b      	ldr	r3, [r3, #16]
 8000d7a:	0c19      	lsrs	r1, r3, #16
 8000d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7e:	3302      	adds	r3, #2
 8000d80:	683a      	ldr	r2, [r7, #0]
 8000d82:	4413      	add	r3, r2
 8000d84:	b2ca      	uxtb	r2, r1
 8000d86:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	691b      	ldr	r3, [r3, #16]
 8000d8c:	0e19      	lsrs	r1, r3, #24
 8000d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d90:	3303      	adds	r3, #3
 8000d92:	683a      	ldr	r2, [r7, #0]
 8000d94:	4413      	add	r3, r2
 8000d96:	b2ca      	uxtb	r2, r1
 8000d98:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	691b      	ldr	r3, [r3, #16]
 8000da8:	69fa      	ldr	r2, [r7, #28]
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d22b      	bcs.n	8000e06 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	699a      	ldr	r2, [r3, #24]
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	4413      	add	r3, r2
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8000dbc:	68f9      	ldr	r1, [r7, #12]
 8000dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc0:	683a      	ldr	r2, [r7, #0]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	b2ca      	uxtb	r2, r1
 8000dc6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	0a19      	lsrs	r1, r3, #8
 8000dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dce:	3301      	adds	r3, #1
 8000dd0:	683a      	ldr	r2, [r7, #0]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	b2ca      	uxtb	r2, r1
 8000dd6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	0c19      	lsrs	r1, r3, #16
 8000ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dde:	3302      	adds	r3, #2
 8000de0:	683a      	ldr	r2, [r7, #0]
 8000de2:	4413      	add	r3, r2
 8000de4:	b2ca      	uxtb	r2, r1
 8000de6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	0e19      	lsrs	r1, r3, #24
 8000dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dee:	3303      	adds	r3, #3
 8000df0:	683a      	ldr	r2, [r7, #0]
 8000df2:	4413      	add	r3, r2
 8000df4:	b2ca      	uxtb	r2, r1
 8000df6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8000df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfa:	3304      	adds	r3, #4
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3301      	adds	r3, #1
 8000e02:	61fb      	str	r3, [r7, #28]
 8000e04:	e7ce      	b.n	8000da4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	69d9      	ldr	r1, [r3, #28]
 8000e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0c:	683a      	ldr	r2, [r7, #0]
 8000e0e:	4413      	add	r3, r2
 8000e10:	b2ca      	uxtb	r2, r1
 8000e12:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	69db      	ldr	r3, [r3, #28]
 8000e18:	0a19      	lsrs	r1, r3, #8
 8000e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	683a      	ldr	r2, [r7, #0]
 8000e20:	4413      	add	r3, r2
 8000e22:	b2ca      	uxtb	r2, r1
 8000e24:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	0c19      	lsrs	r1, r3, #16
 8000e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2e:	3302      	adds	r3, #2
 8000e30:	683a      	ldr	r2, [r7, #0]
 8000e32:	4413      	add	r3, r2
 8000e34:	b2ca      	uxtb	r2, r1
 8000e36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	69db      	ldr	r3, [r3, #28]
 8000e3c:	0e19      	lsrs	r1, r3, #24
 8000e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e40:	3303      	adds	r3, #3
 8000e42:	683a      	ldr	r2, [r7, #0]
 8000e44:	4413      	add	r3, r2
 8000e46:	b2ca      	uxtb	r2, r1
 8000e48:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8000e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000e50:	2300      	movs	r3, #0
 8000e52:	61bb      	str	r3, [r7, #24]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	69db      	ldr	r3, [r3, #28]
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d228      	bcs.n	8000eb0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	4413      	add	r3, r2
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff f9ac 	bl	80001c8 <strlen>
 8000e70:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8000e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e74:	683a      	ldr	r2, [r7, #0]
 8000e76:	4413      	add	r3, r2
 8000e78:	6979      	ldr	r1, [r7, #20]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f000 fc78 	bl	8001770 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e82:	3304      	adds	r3, #4
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8000e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e88:	683a      	ldr	r2, [r7, #0]
 8000e8a:	18d0      	adds	r0, r2, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	4413      	add	r3, r2
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	697a      	ldr	r2, [r7, #20]
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	f003 ffe4 	bl	8004e68 <memcpy>
      offset += length_stringsi;
 8000ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	61bb      	str	r3, [r7, #24]
 8000eae:	e7d1      	b.n	8000e54 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8000eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3728      	adds	r7, #40	; 0x28
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b08e      	sub	sp, #56	; 0x38
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
 8000ec2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eca:	683a      	ldr	r2, [r7, #0]
 8000ecc:	4413      	add	r3, r2
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	683a      	ldr	r2, [r7, #0]
 8000ed8:	4413      	add	r3, r2
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	021b      	lsls	r3, r3, #8
 8000ede:	6a3a      	ldr	r2, [r7, #32]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ee6:	3302      	adds	r3, #2
 8000ee8:	683a      	ldr	r2, [r7, #0]
 8000eea:	4413      	add	r3, r2
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	041b      	lsls	r3, r3, #16
 8000ef0:	6a3a      	ldr	r2, [r7, #32]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ef8:	3303      	adds	r3, #3
 8000efa:	683a      	ldr	r2, [r7, #0]
 8000efc:	4413      	add	r3, r2
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	061b      	lsls	r3, r3, #24
 8000f02:	6a3a      	ldr	r2, [r7, #32]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8000f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f0a:	3304      	adds	r3, #4
 8000f0c:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	6a3a      	ldr	r2, [r7, #32]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d90a      	bls.n	8000f2e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	68da      	ldr	r2, [r3, #12]
 8000f1c:	6a3b      	ldr	r3, [r7, #32]
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	4619      	mov	r1, r3
 8000f22:	4610      	mov	r0, r2
 8000f24:	f003 ffb4 	bl	8004e90 <realloc>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6a3a      	ldr	r2, [r7, #32]
 8000f32:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8000f34:	2300      	movs	r3, #0
 8000f36:	633b      	str	r3, [r7, #48]	; 0x30
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d236      	bcs.n	8000fb0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f4a:	6839      	ldr	r1, [r7, #0]
 8000f4c:	440a      	add	r2, r1
 8000f4e:	7812      	ldrb	r2, [r2, #0]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000f54:	697a      	ldr	r2, [r7, #20]
 8000f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f58:	3301      	adds	r3, #1
 8000f5a:	6839      	ldr	r1, [r7, #0]
 8000f5c:	440b      	add	r3, r1
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	021b      	lsls	r3, r3, #8
 8000f62:	4313      	orrs	r3, r2
 8000f64:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000f66:	697a      	ldr	r2, [r7, #20]
 8000f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f6a:	3302      	adds	r3, #2
 8000f6c:	6839      	ldr	r1, [r7, #0]
 8000f6e:	440b      	add	r3, r1
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	041b      	lsls	r3, r3, #16
 8000f74:	4313      	orrs	r3, r2
 8000f76:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000f78:	697a      	ldr	r2, [r7, #20]
 8000f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f7c:	3303      	adds	r3, #3
 8000f7e:	6839      	ldr	r1, [r7, #0]
 8000f80:	440b      	add	r3, r1
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	061b      	lsls	r3, r3, #24
 8000f86:	4313      	orrs	r3, r2
 8000f88:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8000f8a:	697a      	ldr	r2, [r7, #20]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8000f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f92:	3304      	adds	r3, #4
 8000f94:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	68da      	ldr	r2, [r3, #12]
 8000f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	4413      	add	r3, r2
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	3208      	adds	r2, #8
 8000fa4:	6812      	ldr	r2, [r2, #0]
 8000fa6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8000fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000faa:	3301      	adds	r3, #1
 8000fac:	633b      	str	r3, [r7, #48]	; 0x30
 8000fae:	e7c3      	b.n	8000f38 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fb2:	683a      	ldr	r2, [r7, #0]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	683a      	ldr	r2, [r7, #0]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	021b      	lsls	r3, r3, #8
 8000fc6:	69fa      	ldr	r2, [r7, #28]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fce:	3302      	adds	r3, #2
 8000fd0:	683a      	ldr	r2, [r7, #0]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	041b      	lsls	r3, r3, #16
 8000fd8:	69fa      	ldr	r2, [r7, #28]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fe0:	3303      	adds	r3, #3
 8000fe2:	683a      	ldr	r2, [r7, #0]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	061b      	lsls	r3, r3, #24
 8000fea:	69fa      	ldr	r2, [r7, #28]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8000ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ff2:	3304      	adds	r3, #4
 8000ff4:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	691b      	ldr	r3, [r3, #16]
 8000ffa:	69fa      	ldr	r2, [r7, #28]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d90a      	bls.n	8001016 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	699a      	ldr	r2, [r3, #24]
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	4619      	mov	r1, r3
 800100a:	4610      	mov	r0, r2
 800100c:	f003 ff40 	bl	8004e90 <realloc>
 8001010:	4602      	mov	r2, r0
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	69fa      	ldr	r2, [r7, #28]
 800101a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 800101c:	2300      	movs	r3, #0
 800101e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	691b      	ldr	r3, [r3, #16]
 8001024:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001026:	429a      	cmp	r2, r3
 8001028:	d236      	bcs.n	8001098 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001032:	6839      	ldr	r1, [r7, #0]
 8001034:	440a      	add	r2, r1
 8001036:	7812      	ldrb	r2, [r2, #0]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001040:	3301      	adds	r3, #1
 8001042:	6839      	ldr	r1, [r7, #0]
 8001044:	440b      	add	r3, r1
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	021b      	lsls	r3, r3, #8
 800104a:	4313      	orrs	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001052:	3302      	adds	r3, #2
 8001054:	6839      	ldr	r1, [r7, #0]
 8001056:	440b      	add	r3, r1
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	041b      	lsls	r3, r3, #16
 800105c:	4313      	orrs	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001064:	3303      	adds	r3, #3
 8001066:	6839      	ldr	r1, [r7, #0]
 8001068:	440b      	add	r3, r1
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	061b      	lsls	r3, r3, #24
 800106e:	4313      	orrs	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800107a:	3304      	adds	r3, #4
 800107c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	699a      	ldr	r2, [r3, #24]
 8001082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	4413      	add	r3, r2
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	3214      	adds	r2, #20
 800108c:	6812      	ldr	r2, [r2, #0]
 800108e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001092:	3301      	adds	r3, #1
 8001094:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001096:	e7c3      	b.n	8001020 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800109a:	683a      	ldr	r2, [r7, #0]
 800109c:	4413      	add	r3, r2
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80010a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010a4:	3301      	adds	r3, #1
 80010a6:	683a      	ldr	r2, [r7, #0]
 80010a8:	4413      	add	r3, r2
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	021b      	lsls	r3, r3, #8
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80010b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010b6:	3302      	adds	r3, #2
 80010b8:	683a      	ldr	r2, [r7, #0]
 80010ba:	4413      	add	r3, r2
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	041b      	lsls	r3, r3, #16
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80010c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010c8:	3303      	adds	r3, #3
 80010ca:	683a      	ldr	r2, [r7, #0]
 80010cc:	4413      	add	r3, r2
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	061b      	lsls	r3, r3, #24
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80010d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010da:	3304      	adds	r3, #4
 80010dc:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d90a      	bls.n	80010fe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	4619      	mov	r1, r3
 80010f2:	4610      	mov	r0, r2
 80010f4:	f003 fecc 	bl	8004e90 <realloc>
 80010f8:	4602      	mov	r2, r0
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001104:	2300      	movs	r3, #0
 8001106:	62bb      	str	r3, [r7, #40]	; 0x28
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	69db      	ldr	r3, [r3, #28]
 800110c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800110e:	429a      	cmp	r2, r3
 8001110:	d23f      	bcs.n	8001192 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001114:	683a      	ldr	r2, [r7, #0]
 8001116:	441a      	add	r2, r3
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	4611      	mov	r1, r2
 800111e:	4618      	mov	r0, r3
 8001120:	f000 fb44 	bl	80017ac <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001126:	3304      	adds	r3, #4
 8001128:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800112a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
 800112e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	4413      	add	r3, r2
 8001134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001136:	429a      	cmp	r2, r3
 8001138:	d20c      	bcs.n	8001154 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113e:	441a      	add	r2, r3
 8001140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001142:	3b01      	subs	r3, #1
 8001144:	6839      	ldr	r1, [r7, #0]
 8001146:	440b      	add	r3, r1
 8001148:	7812      	ldrb	r2, [r2, #0]
 800114a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800114c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114e:	3301      	adds	r3, #1
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
 8001152:	e7ec      	b.n	800112e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001154:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	4413      	add	r3, r2
 800115a:	3b01      	subs	r3, #1
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	4413      	add	r3, r2
 8001160:	2200      	movs	r2, #0
 8001162:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001166:	3b01      	subs	r3, #1
 8001168:	683a      	ldr	r2, [r7, #0]
 800116a:	441a      	add	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001170:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	4413      	add	r3, r2
 8001176:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800117c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4413      	add	r3, r2
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	3220      	adds	r2, #32
 8001186:	6812      	ldr	r2, [r2, #0]
 8001188:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800118a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800118c:	3301      	adds	r3, #1
 800118e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001190:	e7ba      	b.n	8001108 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001194:	4618      	mov	r0, r3
 8001196:	3738      	adds	r7, #56	; 0x38
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	4b03      	ldr	r3, [pc, #12]	; (80011b4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80011a6:	4618      	mov	r0, r3
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	0800525c 	.word	0x0800525c

080011b8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	4b03      	ldr	r3, [pc, #12]	; (80011d0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80011c2:	4618      	mov	r0, r3
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	080051c0 	.word	0x080051c0

080011d4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
 80011e0:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	68ba      	ldr	r2, [r7, #8]
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	611a      	str	r2, [r3, #16]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	4618      	mov	r0, r3
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001202:	b580      	push	{r7, lr}
 8001204:	b082      	sub	sp, #8
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
 800120a:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68d8      	ldr	r0, [r3, #12]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	6891      	ldr	r1, [r2, #8]
 800121c:	683a      	ldr	r2, [r7, #0]
 800121e:	4798      	blx	r3
 8001220:	4603      	mov	r3, r0
  };
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800122a:	b480      	push	{r7}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	691b      	ldr	r3, [r3, #16]
  }
 8001236:	4618      	mov	r0, r3
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001242:	b480      	push	{r7}
 8001244:	b083      	sub	sp, #12
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	425b      	negs	r3, r3
 8001256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4a0a      	ldr	r2, [pc, #40]	; (800129c <_ZN13STM32HardwareC1Ev+0x34>)
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4618      	mov	r0, r3
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	20000ad0 	.word	0x20000ad0

080012a0 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f000 f804 	bl	80012b6 <_ZN13STM32Hardware10reset_rbufEv>
    }
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6818      	ldr	r0, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	3304      	adds	r3, #4
 80012c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012ca:	4619      	mov	r1, r3
 80012cc:	f002 fe72 	bl	8003fb4 <HAL_UART_Receive_DMA>
    }
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <_ZN13STM32Hardware4readEv>:

    int read(){
 80012d8:	b590      	push	{r4, r7, lr}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
      int c = -1;
 80012e0:	f04f 33ff 	mov.w	r3, #4294967295
 80012e4:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ffa8 	bl	8001242 <_ZN13STM32Hardware10getRdmaIndEv>
 80012f2:	4603      	mov	r3, r0
 80012f4:	429c      	cmp	r4, r3
 80012f6:	bf14      	ite	ne
 80012f8:	2301      	movne	r3, #1
 80012fa:	2300      	moveq	r3, #0
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d012      	beq.n	8001328 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001308:	1c59      	adds	r1, r3, #1
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	4413      	add	r3, r2
 8001314:	791b      	ldrb	r3, [r3, #4]
 8001316:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800131e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8001328:	68fb      	ldr	r3, [r7, #12]
    }
 800132a:	4618      	mov	r0, r3
 800132c:	3714      	adds	r7, #20
 800132e:	46bd      	mov	sp, r7
 8001330:	bd90      	pop	{r4, r7, pc}
	...

08001334 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b20      	cmp	r3, #32
 8001348:	d108      	bne.n	800135c <_ZN13STM32Hardware5flushEv+0x28>
 800134a:	4b28      	ldr	r3, [pc, #160]	; (80013ec <_ZN13STM32Hardware5flushEv+0xb8>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	f083 0301 	eor.w	r3, r3, #1
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <_ZN13STM32Hardware5flushEv+0x28>
 8001358:	2301      	movs	r3, #1
 800135a:	e000      	b.n	800135e <_ZN13STM32Hardware5flushEv+0x2a>
 800135c:	2300      	movs	r3, #0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d03f      	beq.n	80013e2 <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 8001362:	4b22      	ldr	r3, [pc, #136]	; (80013ec <_ZN13STM32Hardware5flushEv+0xb8>)
 8001364:	2201      	movs	r2, #1
 8001366:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001374:	429a      	cmp	r2, r3
 8001376:	d031      	beq.n	80013dc <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001384:	429a      	cmp	r2, r3
 8001386:	d20a      	bcs.n	800139e <_ZN13STM32Hardware5flushEv+0x6a>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800138e:	b29a      	uxth	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001396:	b29b      	uxth	r3, r3
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	b29b      	uxth	r3, r3
 800139c:	e006      	b.n	80013ac <_ZN13STM32Hardware5flushEv+0x78>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6818      	ldr	r0, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80013b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	4413      	add	r3, r2
 80013c0:	89fa      	ldrh	r2, [r7, #14]
 80013c2:	4619      	mov	r1, r3
 80013c4:	f002 fd8a 	bl	8003edc <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80013ce:	89fb      	ldrh	r3, [r7, #14]
 80013d0:	4413      	add	r3, r2
 80013d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 80013dc:	4b03      	ldr	r3, [pc, #12]	; (80013ec <_ZN13STM32Hardware5flushEv+0xb8>)
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]
      }
    }
 80013e2:	bf00      	nop
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	200000a8 	.word	0x200000a8

080013f0 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
      int n = length;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001406:	bfa8      	it	ge
 8001408:	f44f 7300 	movge.w	r3, #512	; 0x200
 800140c:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001414:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	4293      	cmp	r3, r2
 800141c:	bf28      	it	cs
 800141e:	4613      	movcs	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001428:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	4413      	add	r3, r2
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	68b9      	ldr	r1, [r7, #8]
 8001434:	4618      	mov	r0, r3
 8001436:	f003 fd17 	bl	8004e68 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	4413      	add	r3, r2
 8001444:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 800144e:	697a      	ldr	r2, [r7, #20]
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	429a      	cmp	r2, r3
 8001454:	d00b      	beq.n	800146e <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f503 7002 	add.w	r0, r3, #520	; 0x208
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	68ba      	ldr	r2, [r7, #8]
 8001460:	18d1      	adds	r1, r2, r3
 8001462:	697a      	ldr	r2, [r7, #20]
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	461a      	mov	r2, r3
 800146a:	f003 fcfd 	bl	8004e68 <memcpy>
      }

      flush();
 800146e:	68f8      	ldr	r0, [r7, #12]
 8001470:	f7ff ff60 	bl	8001334 <_ZN13STM32Hardware5flushEv>
    }
 8001474:	bf00      	nop
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	f001 f9dc 	bl	8002840 <HAL_GetTick>
 8001488:	4603      	mov	r3, r0
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
      data("")
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff f858 	bl	8000554 <_ZN3ros3MsgC1Ev>
 80014a4:	4a05      	ldr	r2, [pc, #20]	; (80014bc <_ZN8std_msgs6StringC1Ev+0x28>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <_ZN8std_msgs6StringC1Ev+0x2c>)
 80014ae:	605a      	str	r2, [r3, #4]
    {
    }
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	08005294 	.word	0x08005294
 80014c0:	08005144 	.word	0x08005144

080014c4 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7fe fe76 	bl	80001c8 <strlen>
 80014dc:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	4413      	add	r3, r2
 80014e4:	68b9      	ldr	r1, [r7, #8]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 f942 	bl	8001770 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	3304      	adds	r3, #4
 80014f0:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	18d0      	adds	r0, r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	68ba      	ldr	r2, [r7, #8]
 80014fe:	4619      	mov	r1, r3
 8001500:	f003 fcb2 	bl	8004e68 <memcpy>
      offset += length_data;
 8001504:	68fa      	ldr	r2, [r7, #12]
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	4413      	add	r3, r2
 800150a:	60fb      	str	r3, [r7, #12]
      return offset;
 800150c:	68fb      	ldr	r3, [r7, #12]
    }
 800150e:	4618      	mov	r0, r3
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001516:	b580      	push	{r7, lr}
 8001518:	b086      	sub	sp, #24
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
 800151e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	441a      	add	r2, r3
 800152a:	f107 030c 	add.w	r3, r7, #12
 800152e:	4611      	mov	r1, r2
 8001530:	4618      	mov	r0, r3
 8001532:	f000 f93b 	bl	80017ac <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	3304      	adds	r3, #4
 800153a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	4413      	add	r3, r2
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	429a      	cmp	r2, r3
 800154a:	d20c      	bcs.n	8001566 <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	441a      	add	r2, r3
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	3b01      	subs	r3, #1
 8001556:	6839      	ldr	r1, [r7, #0]
 8001558:	440b      	add	r3, r1
 800155a:	7812      	ldrb	r2, [r2, #0]
 800155c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	3301      	adds	r3, #1
 8001562:	617b      	str	r3, [r7, #20]
 8001564:	e7ec      	b.n	8001540 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4413      	add	r3, r2
 800156c:	3b01      	subs	r3, #1
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	4413      	add	r3, r2
 8001572:	2200      	movs	r2, #0
 8001574:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	3b01      	subs	r3, #1
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	441a      	add	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	4413      	add	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
     return offset;
 800158a:	693b      	ldr	r3, [r7, #16]
    }
 800158c:	4618      	mov	r0, r3
 800158e:	3718      	adds	r7, #24
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	4b03      	ldr	r3, [pc, #12]	; (80015ac <_ZN8std_msgs6String7getTypeEv+0x18>)
 800159e:	4618      	mov	r0, r3
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	080051e4 	.word	0x080051e4

080015b0 <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	4b03      	ldr	r3, [pc, #12]	; (80015c8 <_ZN8std_msgs6String6getMD5Ev+0x18>)
 80015ba:	4618      	mov	r0, r3
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	080051f4 	.word	0x080051f4

080015cc <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	4a04      	ldr	r2, [pc, #16]	; (80015e8 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4618      	mov	r0, r3
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	080052ac 	.word	0x080052ac

080015ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff ffe8 	bl	80015cc <_ZN3ros15NodeHandleBase_C1Ev>
 80015fc:	4a36      	ldr	r2, [pc, #216]	; (80016d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	3304      	adds	r3, #4
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fe2e 	bl	8001268 <_ZN13STM32HardwareC1Ev>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001632:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001636:	2100      	movs	r1, #0
 8001638:	4618      	mov	r0, r3
 800163a:	f003 fc20 	bl	8004e7e <memset>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001644:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001648:	2100      	movs	r1, #0
 800164a:	4618      	mov	r0, r3
 800164c:	f003 fc17 	bl	8004e7e <memset>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8001656:	2264      	movs	r2, #100	; 0x64
 8001658:	2100      	movs	r1, #0
 800165a:	4618      	mov	r0, r3
 800165c:	f003 fc0f 	bl	8004e7e <memset>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8001666:	2264      	movs	r2, #100	; 0x64
 8001668:	2100      	movs	r1, #0
 800166a:	4618      	mov	r0, r3
 800166c:	f003 fc07 	bl	8004e7e <memset>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f603 1314 	addw	r3, r3, #2324	; 0x914
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fab8 	bl	8000c3c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	08005280 	.word	0x08005280

080016dc <HAL_UART_TxCpltCallback>:

std_msgs::String str_msg;
ros::Publisher chatter("chatter", &str_msg);
char hello[] = "Hello world from STM32!";

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 80016e4:	4805      	ldr	r0, [pc, #20]	; (80016fc <HAL_UART_TxCpltCallback+0x20>)
 80016e6:	f000 f886 	bl	80017f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80016ea:	4603      	mov	r3, r0
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fe21 	bl	8001334 <_ZN13STM32Hardware5flushEv>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	200000ac 	.word	0x200000ac

08001700 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8001708:	4805      	ldr	r0, [pc, #20]	; (8001720 <HAL_UART_RxCpltCallback+0x20>)
 800170a:	f000 f874 	bl	80017f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800170e:	4603      	mov	r3, r0
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff fdd0 	bl	80012b6 <_ZN13STM32Hardware10reset_rbufEv>
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200000ac 	.word	0x200000ac

08001724 <CppMain>:

void CppMain(){
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
	nh.initNode();
 8001728:	480c      	ldr	r0, [pc, #48]	; (800175c <CppMain+0x38>)
 800172a:	f000 f870 	bl	800180e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.advertise(chatter);
 800172e:	490c      	ldr	r1, [pc, #48]	; (8001760 <CppMain+0x3c>)
 8001730:	480a      	ldr	r0, [pc, #40]	; (800175c <CppMain+0x38>)
 8001732:	f000 f889 	bl	8001848 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

	while(1){
		HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8001736:	2101      	movs	r1, #1
 8001738:	480a      	ldr	r0, [pc, #40]	; (8001764 <CppMain+0x40>)
 800173a:	f001 ff04 	bl	8003546 <HAL_GPIO_TogglePin>

		str_msg.data = hello;
 800173e:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <CppMain+0x44>)
 8001740:	4a0a      	ldr	r2, [pc, #40]	; (800176c <CppMain+0x48>)
 8001742:	605a      	str	r2, [r3, #4]
		chatter.publish(&str_msg);
 8001744:	4908      	ldr	r1, [pc, #32]	; (8001768 <CppMain+0x44>)
 8001746:	4806      	ldr	r0, [pc, #24]	; (8001760 <CppMain+0x3c>)
 8001748:	f7ff fd5b 	bl	8001202 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		nh.spinOnce();
 800174c:	4803      	ldr	r0, [pc, #12]	; (800175c <CppMain+0x38>)
 800174e:	f000 f8ab 	bl	80018a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

		HAL_Delay(2000);
 8001752:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001756:	f001 f87f 	bl	8002858 <HAL_Delay>
		HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 800175a:	e7ec      	b.n	8001736 <CppMain+0x12>
 800175c:	200000ac 	.word	0x200000ac
 8001760:	200009f0 	.word	0x200009f0
 8001764:	40021000 	.word	0x40021000
 8001768:	200009e8 	.word	0x200009e8
 800176c:	20000000 	.word	0x20000000

08001770 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2b03      	cmp	r3, #3
 8001782:	d80d      	bhi.n	80017a0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	fa22 f103 	lsr.w	r1, r2, r3
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4413      	add	r3, r2
 8001794:	b2ca      	uxtb	r2, r1
 8001796:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	3301      	adds	r3, #1
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	e7ee      	b.n	800177e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80017a0:	bf00      	nop
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80017bc:	2300      	movs	r3, #0
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2b03      	cmp	r3, #3
 80017c4:	d811      	bhi.n	80017ea <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6839      	ldr	r1, [r7, #0]
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	440a      	add	r2, r1
 80017d0:	7812      	ldrb	r2, [r2, #0]
 80017d2:	4611      	mov	r1, r2
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	00d2      	lsls	r2, r2, #3
 80017d8:	fa01 f202 	lsl.w	r2, r1, r2
 80017dc:	431a      	orrs	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	3301      	adds	r3, #1
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	e7ea      	b.n	80017c0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80017ea:	bf00      	nop
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3304      	adds	r3, #4
  }
 8001802:	4618      	mov	r0, r3
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	3304      	adds	r3, #4
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff fd40 	bl	80012a0 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2b18      	cmp	r3, #24
 800185a:	dc1e      	bgt.n	800189a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d111      	bne.n	8001892 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	60da      	str	r2, [r3, #12]
        return true;
 800188e:	2301      	movs	r3, #1
 8001890:	e004      	b.n	800189c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	3301      	adds	r3, #1
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	e7dd      	b.n	8001856 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 800189a:	2300      	movs	r3, #0
  }
 800189c:	4618      	mov	r0, r3
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3304      	adds	r3, #4
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff fde1 	bl	800147c <_ZN13STM32Hardware4timeEv>
 80018ba:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d903      	bls.n	80018d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d009      	beq.n	80018f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d903      	bls.n	80018f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d014      	beq.n	8001928 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	3304      	adds	r3, #4
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff fdba 	bl	800147c <_ZN13STM32Hardware4timeEv>
 8001908:	4602      	mov	r2, r0
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	1ad2      	subs	r2, r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001914:	429a      	cmp	r2, r3
 8001916:	bf8c      	ite	hi
 8001918:	2301      	movhi	r3, #1
 800191a:	2300      	movls	r3, #0
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d002      	beq.n	8001928 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8001922:	f06f 0301 	mvn.w	r3, #1
 8001926:	e197      	b.n	8001c58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      int data = hardware_.read();
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3304      	adds	r3, #4
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fcd3 	bl	80012d8 <_ZN13STM32Hardware4readEv>
 8001932:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	2b00      	cmp	r3, #0
 8001938:	f2c0 8177 	blt.w	8001c2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x382>
      checksum_ += data;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	441a      	add	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001952:	2b07      	cmp	r3, #7
 8001954:	d11e      	bne.n	8001994 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 800195c:	1c59      	adds	r1, r3, #1
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8001964:	68ba      	ldr	r2, [r7, #8]
 8001966:	b2d1      	uxtb	r1, r2
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	4413      	add	r3, r2
 800196c:	460a      	mov	r2, r1
 800196e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001978:	1e5a      	subs	r2, r3, #1
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1b4      	bne.n	80018f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2208      	movs	r2, #8
 800198e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001992:	e7af      	b.n	80018f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800199a:	2b00      	cmp	r3, #0
 800199c:	d128      	bne.n	80019f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	2bff      	cmp	r3, #255	; 0xff
 80019a2:	d10d      	bne.n	80019c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80019aa:	1c5a      	adds	r2, r3, #1
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f103 0214 	add.w	r2, r3, #20
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80019be:	e799      	b.n	80018f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3304      	adds	r3, #4
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fd59 	bl	800147c <_ZN13STM32Hardware4timeEv>
 80019ca:	4602      	mov	r2, r0
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d4:	4293      	cmp	r3, r2
 80019d6:	bf8c      	ite	hi
 80019d8:	2301      	movhi	r3, #1
 80019da:	2300      	movls	r3, #0
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d088      	beq.n	80018f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 80019ea:	f06f 0301 	mvn.w	r3, #1
 80019ee:	e133      	b.n	8001c58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      else if (mode_ == MODE_PROTOCOL_VER)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d11b      	bne.n	8001a32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x18a>
        if (data == PROTOCOL_VER)
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	2bfe      	cmp	r3, #254	; 0xfe
 80019fe:	d107      	bne.n	8001a10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001a06:	1c5a      	adds	r2, r3, #1
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001a0e:	e771      	b.n	80018f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001a1e:	f083 0301 	eor.w	r3, r3, #1
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f43f af65 	beq.w	80018f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 f918 	bl	8001c60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8001a30:	e760      	b.n	80018f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d113      	bne.n	8001a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1bc>
        bytes_ = data;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001a52:	1c5a      	adds	r2, r3, #1
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68ba      	ldr	r2, [r7, #8]
 8001a5e:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001a62:	e747      	b.n	80018f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d110      	bne.n	8001a90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e8>
        bytes_ += data << 8;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	021b      	lsls	r3, r3, #8
 8001a78:	441a      	add	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001a86:	1c5a      	adds	r2, r3, #1
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001a8e:	e731      	b.n	80018f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	d116      	bne.n	8001ac8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x220>
        if ((checksum_ % 256) == 255)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8001aa0:	425a      	negs	r2, r3
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	bf58      	it	pl
 8001aa8:	4253      	negpl	r3, r2
 8001aaa:	2bff      	cmp	r3, #255	; 0xff
 8001aac:	d107      	bne.n	8001abe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x216>
          mode_++;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001ab4:	1c5a      	adds	r2, r3, #1
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001abc:	e71a      	b.n	80018f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001ac6:	e715      	b.n	80018f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001ace:	2b05      	cmp	r3, #5
 8001ad0:	d10f      	bne.n	8001af2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x24a>
        topic_ = data;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68ba      	ldr	r2, [r7, #8]
 8001ad6:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001ae0:	1c5a      	adds	r2, r3, #1
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001af0:	e700      	b.n	80018f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001af8:	2b06      	cmp	r3, #6
 8001afa:	d117      	bne.n	8001b2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x284>
        topic_ += data << 8;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	021b      	lsls	r3, r3, #8
 8001b06:	441a      	add	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2207      	movs	r2, #7
 8001b12:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f47f aee9 	bne.w	80018f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2208      	movs	r2, #8
 8001b26:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001b2a:	e6e3      	b.n	80018f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001b32:	2b08      	cmp	r3, #8
 8001b34:	f47f aede 	bne.w	80018f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8001b46:	425a      	negs	r2, r3
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	bf58      	it	pl
 8001b4e:	4253      	negpl	r3, r2
 8001b50:	2bff      	cmp	r3, #255	; 0xff
 8001b52:	f47f aecf 	bne.w	80018f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d110      	bne.n	8001b82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2da>
            requestSyncTime();
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 f87d 	bl	8001c60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f898 	bl	8001c9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8001b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b80:	e06a      	b.n	8001c58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
          else if (topic_ == TopicInfo::ID_TIME)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001b88:	2b0a      	cmp	r3, #10
 8001b8a:	d107      	bne.n	8001b9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2f4>
            syncTime(message_in);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001b92:	4619      	mov	r1, r3
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 f961 	bl	8001e5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8001b9a:	e6ab      	b.n	80018f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001ba2:	2b06      	cmp	r3, #6
 8001ba4:	d10e      	bne.n	8001bc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x31c>
            req_param_resp.deserialize(message_in);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	f7ff f980 	bl	8000eba <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8001bc2:	e697      	b.n	80018f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001bca:	2b0b      	cmp	r3, #11
 8001bcc:	d104      	bne.n	8001bd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x330>
            configured_ = false;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8001bd6:	e68d      	b.n	80018f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001bde:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f43f ae81 	beq.w	80018f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001bf8:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001c02:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001c0c:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8001c24:	4611      	mov	r1, r2
 8001c26:	4798      	blx	r3
    while (true)
 8001c28:	e664      	b.n	80018f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8001c2a:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00f      	beq.n	8001c56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d906      	bls.n	8001c56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
      requestSyncTime();
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 f809 	bl	8001c60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8001c56:	2300      	movs	r3, #0
  }
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8001c68:	f107 030c 	add.w	r3, r7, #12
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7fe fc81 	bl	8000574 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f107 020c 	add.w	r2, r7, #12
 8001c7c:	210a      	movs	r1, #10
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	4798      	blx	r3
    rt_time = hardware_.time();
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	3304      	adds	r3, #4
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff fbf8 	bl	800147c <_ZN13STM32Hardware4timeEv>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8001c94:	bf00      	nop
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8001c9c:	b590      	push	{r4, r7, lr}
 8001c9e:	b08b      	sub	sp, #44	; 0x2c
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8001ca4:	f107 030c 	add.w	r3, r7, #12
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7fe fd53 	bl	8000754 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001cae:	2300      	movs	r3, #0
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	2b18      	cmp	r3, #24
 8001cb6:	dc63      	bgt.n	8001d80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d056      	beq.n	8001d78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	6859      	ldr	r1, [r3, #4]
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	3308      	adds	r3, #8
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4608      	mov	r0, r1
 8001d18:	4798      	blx	r3
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	6859      	ldr	r1, [r3, #4]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	330c      	adds	r3, #12
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4608      	mov	r0, r1
 8001d46:	4798      	blx	r3
 8001d48:	4603      	mov	r3, r0
 8001d4a:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8001d4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d50:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681c      	ldr	r4, [r3, #0]
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fa5f 	bl	800122a <_ZN3ros9Publisher15getEndpointTypeEv>
 8001d6c:	4601      	mov	r1, r0
 8001d6e:	f107 030c 	add.w	r3, r7, #12
 8001d72:	461a      	mov	r2, r3
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d7e:	e798      	b.n	8001cb2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001d80:	2300      	movs	r3, #0
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d86:	2b18      	cmp	r3, #24
 8001d88:	dc5f      	bgt.n	8001e4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d8e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d053      	beq.n	8001e42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d9e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db0:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc0:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001dc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dcc:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	3308      	adds	r3, #8
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4608      	mov	r0, r1
 8001ddc:	4798      	blx	r3
 8001dde:	4603      	mov	r3, r0
 8001de0:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de6:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001dea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001df2:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	330c      	adds	r3, #12
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4608      	mov	r0, r1
 8001e02:	4798      	blx	r3
 8001e04:	4603      	mov	r3, r0
 8001e06:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8001e08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e0c:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681c      	ldr	r4, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e18:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001e1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e24:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	3304      	adds	r3, #4
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4608      	mov	r0, r1
 8001e34:	4798      	blx	r3
 8001e36:	4601      	mov	r1, r0
 8001e38:	f107 030c 	add.w	r3, r7, #12
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	3301      	adds	r3, #1
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
 8001e48:	e79c      	b.n	8001d84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8001e52:	bf00      	nop
 8001e54:	372c      	adds	r7, #44	; 0x2c
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd90      	pop	{r4, r7, pc}
	...

08001e5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8001e66:	f107 0308 	add.w	r3, r7, #8
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fb82 	bl	8000574 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3304      	adds	r3, #4
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff fb01 	bl	800147c <_ZN13STM32Hardware4timeEv>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8001e86:	f107 0308 	add.w	r3, r7, #8
 8001e8a:	6839      	ldr	r1, [r7, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7fe fbe1 	bl	8000654 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	4915      	ldr	r1, [pc, #84]	; (8001eec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8001e98:	fba1 1303 	umull	r1, r3, r1, r3
 8001e9c:	099b      	lsrs	r3, r3, #6
 8001e9e:	4413      	add	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8001ea2:	6939      	ldr	r1, [r7, #16]
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	4b11      	ldr	r3, [pc, #68]	; (8001eec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8001ea8:	fba3 0302 	umull	r0, r3, r3, r2
 8001eac:	099b      	lsrs	r3, r3, #6
 8001eae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001eb2:	fb00 f303 	mul.w	r3, r0, r3
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	4a0d      	ldr	r2, [pc, #52]	; (8001ef0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8001eba:	fb02 f303 	mul.w	r3, r2, r3
 8001ebe:	440b      	add	r3, r1
 8001ec0:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8001ec2:	f107 0308 	add.w	r3, r7, #8
 8001ec6:	3304      	adds	r3, #4
 8001ec8:	4619      	mov	r1, r3
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f8a4 	bl	8002018 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3304      	adds	r3, #4
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff fad1 	bl	800147c <_ZN13STM32Hardware4timeEv>
 8001eda:	4602      	mov	r2, r0
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8001ee2:	bf00      	nop
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	10624dd3 	.word	0x10624dd3
 8001ef0:	000f4240 	.word	0x000f4240

08001ef4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b088      	sub	sp, #32
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	2b63      	cmp	r3, #99	; 0x63
 8001f04:	dd09      	ble.n	8001f1a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001f0c:	f083 0301 	eor.w	r3, r3, #1
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8001f16:	2300      	movs	r3, #0
 8001f18:	e077      	b.n	800200a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8001f26:	3207      	adds	r2, #7
 8001f28:	4611      	mov	r1, r2
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	4798      	blx	r3
 8001f2e:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	22ff      	movs	r2, #255	; 0xff
 8001f34:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	22fe      	movs	r2, #254	; 0xfe
 8001f3c:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	121b      	asrs	r3, r3, #8
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8001f64:	4413      	add	r3, r2
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	b21b      	sxth	r3, r3
 8001f80:	121b      	asrs	r3, r3, #8
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8001f8e:	2305      	movs	r3, #5
 8001f90:	61bb      	str	r3, [r7, #24]
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	3307      	adds	r3, #7
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	da0d      	bge.n	8001fb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	4413      	add	r3, r2
 8001fae:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	61bb      	str	r3, [r7, #24]
 8001fb6:	e7ec      	b.n	8001f92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	3307      	adds	r3, #7
 8001fbc:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	425a      	negs	r2, r3
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	bf58      	it	pl
 8001fc8:	4253      	negpl	r3, r2
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	1c59      	adds	r1, r3, #1
 8001fd0:	6179      	str	r1, [r7, #20]
 8001fd2:	43d2      	mvns	r2, r2
 8001fd4:	b2d1      	uxtb	r1, r2
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	4413      	add	r3, r2
 8001fda:	460a      	mov	r2, r1
 8001fdc:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fe6:	dc0a      	bgt.n	8001ffe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	1d18      	adds	r0, r3, #4
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001ff2:	697a      	ldr	r2, [r7, #20]
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f7ff f9fb 	bl	80013f0 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	e005      	b.n	800200a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8001ffe:	4905      	ldr	r1, [pc, #20]	; (8002014 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f000 f849 	bl	8002098 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8002006:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 800200a:	4618      	mov	r0, r3
 800200c:	3720      	adds	r7, #32
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	08005218 	.word	0x08005218

08002018 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3304      	adds	r3, #4
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff fa28 	bl	800147c <_ZN13STM32Hardware4timeEv>
 800202c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	4915      	ldr	r1, [pc, #84]	; (800208c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8002036:	fba1 1303 	umull	r1, r3, r1, r3
 800203a:	099b      	lsrs	r3, r3, #6
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	1e5a      	subs	r2, r3, #1
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	6859      	ldr	r1, [r3, #4]
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	4b0f      	ldr	r3, [pc, #60]	; (800208c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 800204e:	fba3 0302 	umull	r0, r3, r3, r2
 8002052:	099b      	lsrs	r3, r3, #6
 8002054:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002058:	fb00 f303 	mul.w	r3, r0, r3
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	4a0c      	ldr	r2, [pc, #48]	; (8002090 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8002060:	fb02 f303 	mul.w	r3, r2, r3
 8002064:	1aca      	subs	r2, r1, r3
 8002066:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8002068:	4413      	add	r3, r2
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800207c:	4619      	mov	r1, r3
 800207e:	4610      	mov	r0, r2
 8002080:	f7fe fa2a 	bl	80004d8 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8002084:	bf00      	nop
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	10624dd3 	.word	0x10624dd3
 8002090:	000f4240 	.word	0x000f4240
 8002094:	3b9aca00 	.word	0x3b9aca00

08002098 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	2103      	movs	r1, #3
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f804 	bl	80020b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80020ac:	bf00      	nop
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b088      	sub	sp, #32
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	460b      	mov	r3, r1
 80020be:	607a      	str	r2, [r7, #4]
 80020c0:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80020c2:	f107 0314 	add.w	r3, r7, #20
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe fd08 	bl	8000adc <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80020cc:	7afb      	ldrb	r3, [r7, #11]
 80020ce:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f107 0214 	add.w	r2, r7, #20
 80020de:	2107      	movs	r1, #7
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	4798      	blx	r3
  }
 80020e4:	bf00      	nop
 80020e6:	3720      	adds	r7, #32
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <_Z41__static_initialization_and_destruction_0ii>:
	}
}
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d110      	bne.n	800211e <_Z41__static_initialization_and_destruction_0ii+0x32>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002102:	4293      	cmp	r3, r2
 8002104:	d10b      	bne.n	800211e <_Z41__static_initialization_and_destruction_0ii+0x32>
ros::NodeHandle nh;
 8002106:	4808      	ldr	r0, [pc, #32]	; (8002128 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8002108:	f7ff fa70 	bl	80015ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 800210c:	4807      	ldr	r0, [pc, #28]	; (800212c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800210e:	f7ff f9c1 	bl	8001494 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 8002112:	2300      	movs	r3, #0
 8002114:	4a05      	ldr	r2, [pc, #20]	; (800212c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002116:	4906      	ldr	r1, [pc, #24]	; (8002130 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8002118:	4806      	ldr	r0, [pc, #24]	; (8002134 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800211a:	f7ff f85b 	bl	80011d4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	200000ac 	.word	0x200000ac
 800212c:	200009e8 	.word	0x200009e8
 8002130:	08005254 	.word	0x08005254
 8002134:	200009f0 	.word	0x200009f0

08002138 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
    return configured_;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8002146:	4618      	mov	r0, r3
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <_GLOBAL__sub_I_nh>:
 8002152:	b580      	push	{r7, lr}
 8002154:	af00      	add	r7, sp, #0
 8002156:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800215a:	2001      	movs	r0, #1
 800215c:	f7ff ffc6 	bl	80020ec <_Z41__static_initialization_and_destruction_0ii>
 8002160:	bd80      	pop	{r7, pc}

08002162 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002166:	f000 fb05 	bl	8002774 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800216a:	f000 f809 	bl	8002180 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800216e:	f000 f8c3 	bl	80022f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002172:	f000 f899 	bl	80022a8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002176:	f000 f86d 	bl	8002254 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  CppMain();
 800217a:	f7ff fad3 	bl	8001724 <CppMain>
 800217e:	e7fc      	b.n	800217a <main+0x18>

08002180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b094      	sub	sp, #80	; 0x50
 8002184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002186:	f107 0320 	add.w	r3, r7, #32
 800218a:	2230      	movs	r2, #48	; 0x30
 800218c:	2100      	movs	r1, #0
 800218e:	4618      	mov	r0, r3
 8002190:	f002 fe75 	bl	8004e7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002194:	f107 030c 	add.w	r3, r7, #12
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
 80021a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021a4:	2300      	movs	r3, #0
 80021a6:	60bb      	str	r3, [r7, #8]
 80021a8:	4b28      	ldr	r3, [pc, #160]	; (800224c <SystemClock_Config+0xcc>)
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	4a27      	ldr	r2, [pc, #156]	; (800224c <SystemClock_Config+0xcc>)
 80021ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b2:	6413      	str	r3, [r2, #64]	; 0x40
 80021b4:	4b25      	ldr	r3, [pc, #148]	; (800224c <SystemClock_Config+0xcc>)
 80021b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021bc:	60bb      	str	r3, [r7, #8]
 80021be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021c0:	2300      	movs	r3, #0
 80021c2:	607b      	str	r3, [r7, #4]
 80021c4:	4b22      	ldr	r3, [pc, #136]	; (8002250 <SystemClock_Config+0xd0>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a21      	ldr	r2, [pc, #132]	; (8002250 <SystemClock_Config+0xd0>)
 80021ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ce:	6013      	str	r3, [r2, #0]
 80021d0:	4b1f      	ldr	r3, [pc, #124]	; (8002250 <SystemClock_Config+0xd0>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021d8:	607b      	str	r3, [r7, #4]
 80021da:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021dc:	2301      	movs	r3, #1
 80021de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021e6:	2302      	movs	r3, #2
 80021e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80021f0:	2308      	movs	r3, #8
 80021f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80021f4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80021f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021fa:	2302      	movs	r3, #2
 80021fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80021fe:	2307      	movs	r3, #7
 8002200:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002202:	f107 0320 	add.w	r3, r7, #32
 8002206:	4618      	mov	r0, r3
 8002208:	f001 f9b8 	bl	800357c <HAL_RCC_OscConfig>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002212:	f000 f8e7 	bl	80023e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002216:	230f      	movs	r3, #15
 8002218:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800221a:	2302      	movs	r3, #2
 800221c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002222:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002226:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002228:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800222c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800222e:	f107 030c 	add.w	r3, r7, #12
 8002232:	2105      	movs	r1, #5
 8002234:	4618      	mov	r0, r3
 8002236:	f001 fc11 	bl	8003a5c <HAL_RCC_ClockConfig>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002240:	f000 f8d0 	bl	80023e4 <Error_Handler>
  }
}
 8002244:	bf00      	nop
 8002246:	3750      	adds	r7, #80	; 0x50
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40023800 	.word	0x40023800
 8002250:	40007000 	.word	0x40007000

08002254 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002258:	4b11      	ldr	r3, [pc, #68]	; (80022a0 <MX_USART2_UART_Init+0x4c>)
 800225a:	4a12      	ldr	r2, [pc, #72]	; (80022a4 <MX_USART2_UART_Init+0x50>)
 800225c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800225e:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <MX_USART2_UART_Init+0x4c>)
 8002260:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002264:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002266:	4b0e      	ldr	r3, [pc, #56]	; (80022a0 <MX_USART2_UART_Init+0x4c>)
 8002268:	2200      	movs	r2, #0
 800226a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800226c:	4b0c      	ldr	r3, [pc, #48]	; (80022a0 <MX_USART2_UART_Init+0x4c>)
 800226e:	2200      	movs	r2, #0
 8002270:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002272:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <MX_USART2_UART_Init+0x4c>)
 8002274:	2200      	movs	r2, #0
 8002276:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002278:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <MX_USART2_UART_Init+0x4c>)
 800227a:	220c      	movs	r2, #12
 800227c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800227e:	4b08      	ldr	r3, [pc, #32]	; (80022a0 <MX_USART2_UART_Init+0x4c>)
 8002280:	2200      	movs	r2, #0
 8002282:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002284:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <MX_USART2_UART_Init+0x4c>)
 8002286:	2200      	movs	r2, #0
 8002288:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800228a:	4805      	ldr	r0, [pc, #20]	; (80022a0 <MX_USART2_UART_Init+0x4c>)
 800228c:	f001 fdd8 	bl	8003e40 <HAL_UART_Init>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002296:	f000 f8a5 	bl	80023e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20000ad0 	.word	0x20000ad0
 80022a4:	40004400 	.word	0x40004400

080022a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	607b      	str	r3, [r7, #4]
 80022b2:	4b10      	ldr	r3, [pc, #64]	; (80022f4 <MX_DMA_Init+0x4c>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	4a0f      	ldr	r2, [pc, #60]	; (80022f4 <MX_DMA_Init+0x4c>)
 80022b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022bc:	6313      	str	r3, [r2, #48]	; 0x30
 80022be:	4b0d      	ldr	r3, [pc, #52]	; (80022f4 <MX_DMA_Init+0x4c>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022c6:	607b      	str	r3, [r7, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80022ca:	2200      	movs	r2, #0
 80022cc:	2100      	movs	r1, #0
 80022ce:	2010      	movs	r0, #16
 80022d0:	f000 fbbf 	bl	8002a52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80022d4:	2010      	movs	r0, #16
 80022d6:	f000 fbd8 	bl	8002a8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80022da:	2200      	movs	r2, #0
 80022dc:	2100      	movs	r1, #0
 80022de:	2011      	movs	r0, #17
 80022e0:	f000 fbb7 	bl	8002a52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80022e4:	2011      	movs	r0, #17
 80022e6:	f000 fbd0 	bl	8002a8a <HAL_NVIC_EnableIRQ>

}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40023800 	.word	0x40023800

080022f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b08a      	sub	sp, #40	; 0x28
 80022fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022fe:	f107 0314 	add.w	r3, r7, #20
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	605a      	str	r2, [r3, #4]
 8002308:	609a      	str	r2, [r3, #8]
 800230a:	60da      	str	r2, [r3, #12]
 800230c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	613b      	str	r3, [r7, #16]
 8002312:	4b31      	ldr	r3, [pc, #196]	; (80023d8 <MX_GPIO_Init+0xe0>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	4a30      	ldr	r2, [pc, #192]	; (80023d8 <MX_GPIO_Init+0xe0>)
 8002318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
 800231e:	4b2e      	ldr	r3, [pc, #184]	; (80023d8 <MX_GPIO_Init+0xe0>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002326:	613b      	str	r3, [r7, #16]
 8002328:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	4b2a      	ldr	r3, [pc, #168]	; (80023d8 <MX_GPIO_Init+0xe0>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	4a29      	ldr	r2, [pc, #164]	; (80023d8 <MX_GPIO_Init+0xe0>)
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	6313      	str	r3, [r2, #48]	; 0x30
 800233a:	4b27      	ldr	r3, [pc, #156]	; (80023d8 <MX_GPIO_Init+0xe0>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	60bb      	str	r3, [r7, #8]
 800234a:	4b23      	ldr	r3, [pc, #140]	; (80023d8 <MX_GPIO_Init+0xe0>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	4a22      	ldr	r2, [pc, #136]	; (80023d8 <MX_GPIO_Init+0xe0>)
 8002350:	f043 0308 	orr.w	r3, r3, #8
 8002354:	6313      	str	r3, [r2, #48]	; 0x30
 8002356:	4b20      	ldr	r3, [pc, #128]	; (80023d8 <MX_GPIO_Init+0xe0>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	60bb      	str	r3, [r7, #8]
 8002360:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	607b      	str	r3, [r7, #4]
 8002366:	4b1c      	ldr	r3, [pc, #112]	; (80023d8 <MX_GPIO_Init+0xe0>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	4a1b      	ldr	r2, [pc, #108]	; (80023d8 <MX_GPIO_Init+0xe0>)
 800236c:	f043 0310 	orr.w	r3, r3, #16
 8002370:	6313      	str	r3, [r2, #48]	; 0x30
 8002372:	4b19      	ldr	r3, [pc, #100]	; (80023d8 <MX_GPIO_Init+0xe0>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	f003 0310 	and.w	r3, r3, #16
 800237a:	607b      	str	r3, [r7, #4]
 800237c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_2_Pin|LED_3_Pin|LED_4_Pin, GPIO_PIN_RESET);
 800237e:	2200      	movs	r2, #0
 8002380:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8002384:	4815      	ldr	r0, [pc, #84]	; (80023dc <MX_GPIO_Init+0xe4>)
 8002386:	f001 f8c5 	bl	8003514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 800238a:	2200      	movs	r2, #0
 800238c:	2101      	movs	r1, #1
 800238e:	4814      	ldr	r0, [pc, #80]	; (80023e0 <MX_GPIO_Init+0xe8>)
 8002390:	f001 f8c0 	bl	8003514 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_2_Pin LED_3_Pin LED_4_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_3_Pin|LED_4_Pin;
 8002394:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800239a:	2301      	movs	r3, #1
 800239c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a2:	2300      	movs	r3, #0
 80023a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023a6:	f107 0314 	add.w	r3, r7, #20
 80023aa:	4619      	mov	r1, r3
 80023ac:	480b      	ldr	r0, [pc, #44]	; (80023dc <MX_GPIO_Init+0xe4>)
 80023ae:	f000 ff17 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_1_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin;
 80023b2:	2301      	movs	r3, #1
 80023b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b6:	2301      	movs	r3, #1
 80023b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ba:	2300      	movs	r3, #0
 80023bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023be:	2300      	movs	r3, #0
 80023c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 80023c2:	f107 0314 	add.w	r3, r7, #20
 80023c6:	4619      	mov	r1, r3
 80023c8:	4805      	ldr	r0, [pc, #20]	; (80023e0 <MX_GPIO_Init+0xe8>)
 80023ca:	f000 ff09 	bl	80031e0 <HAL_GPIO_Init>

}
 80023ce:	bf00      	nop
 80023d0:	3728      	adds	r7, #40	; 0x28
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40023800 	.word	0x40023800
 80023dc:	40020c00 	.word	0x40020c00
 80023e0:	40021000 	.word	0x40021000

080023e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80023e8:	bf00      	nop
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
	...

080023f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	607b      	str	r3, [r7, #4]
 80023fe:	4b10      	ldr	r3, [pc, #64]	; (8002440 <HAL_MspInit+0x4c>)
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	4a0f      	ldr	r2, [pc, #60]	; (8002440 <HAL_MspInit+0x4c>)
 8002404:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002408:	6453      	str	r3, [r2, #68]	; 0x44
 800240a:	4b0d      	ldr	r3, [pc, #52]	; (8002440 <HAL_MspInit+0x4c>)
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002412:	607b      	str	r3, [r7, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	603b      	str	r3, [r7, #0]
 800241a:	4b09      	ldr	r3, [pc, #36]	; (8002440 <HAL_MspInit+0x4c>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	4a08      	ldr	r2, [pc, #32]	; (8002440 <HAL_MspInit+0x4c>)
 8002420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002424:	6413      	str	r3, [r2, #64]	; 0x40
 8002426:	4b06      	ldr	r3, [pc, #24]	; (8002440 <HAL_MspInit+0x4c>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242e:	603b      	str	r3, [r7, #0]
 8002430:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002432:	2007      	movs	r0, #7
 8002434:	f000 fb02 	bl	8002a3c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002438:	bf00      	nop
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40023800 	.word	0x40023800

08002444 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08a      	sub	sp, #40	; 0x28
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800244c:	f107 0314 	add.w	r3, r7, #20
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	60da      	str	r2, [r3, #12]
 800245a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a4b      	ldr	r2, [pc, #300]	; (8002590 <HAL_UART_MspInit+0x14c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	f040 8090 	bne.w	8002588 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002468:	2300      	movs	r3, #0
 800246a:	613b      	str	r3, [r7, #16]
 800246c:	4b49      	ldr	r3, [pc, #292]	; (8002594 <HAL_UART_MspInit+0x150>)
 800246e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002470:	4a48      	ldr	r2, [pc, #288]	; (8002594 <HAL_UART_MspInit+0x150>)
 8002472:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002476:	6413      	str	r3, [r2, #64]	; 0x40
 8002478:	4b46      	ldr	r3, [pc, #280]	; (8002594 <HAL_UART_MspInit+0x150>)
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002480:	613b      	str	r3, [r7, #16]
 8002482:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002484:	2300      	movs	r3, #0
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	4b42      	ldr	r3, [pc, #264]	; (8002594 <HAL_UART_MspInit+0x150>)
 800248a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248c:	4a41      	ldr	r2, [pc, #260]	; (8002594 <HAL_UART_MspInit+0x150>)
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	6313      	str	r3, [r2, #48]	; 0x30
 8002494:	4b3f      	ldr	r3, [pc, #252]	; (8002594 <HAL_UART_MspInit+0x150>)
 8002496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80024a0:	230c      	movs	r3, #12
 80024a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a4:	2302      	movs	r3, #2
 80024a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ac:	2303      	movs	r3, #3
 80024ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024b0:	2307      	movs	r3, #7
 80024b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b4:	f107 0314 	add.w	r3, r7, #20
 80024b8:	4619      	mov	r1, r3
 80024ba:	4837      	ldr	r0, [pc, #220]	; (8002598 <HAL_UART_MspInit+0x154>)
 80024bc:	f000 fe90 	bl	80031e0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80024c0:	4b36      	ldr	r3, [pc, #216]	; (800259c <HAL_UART_MspInit+0x158>)
 80024c2:	4a37      	ldr	r2, [pc, #220]	; (80025a0 <HAL_UART_MspInit+0x15c>)
 80024c4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80024c6:	4b35      	ldr	r3, [pc, #212]	; (800259c <HAL_UART_MspInit+0x158>)
 80024c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024cc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024ce:	4b33      	ldr	r3, [pc, #204]	; (800259c <HAL_UART_MspInit+0x158>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024d4:	4b31      	ldr	r3, [pc, #196]	; (800259c <HAL_UART_MspInit+0x158>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024da:	4b30      	ldr	r3, [pc, #192]	; (800259c <HAL_UART_MspInit+0x158>)
 80024dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024e0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024e2:	4b2e      	ldr	r3, [pc, #184]	; (800259c <HAL_UART_MspInit+0x158>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024e8:	4b2c      	ldr	r3, [pc, #176]	; (800259c <HAL_UART_MspInit+0x158>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80024ee:	4b2b      	ldr	r3, [pc, #172]	; (800259c <HAL_UART_MspInit+0x158>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024f4:	4b29      	ldr	r3, [pc, #164]	; (800259c <HAL_UART_MspInit+0x158>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024fa:	4b28      	ldr	r3, [pc, #160]	; (800259c <HAL_UART_MspInit+0x158>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002500:	4826      	ldr	r0, [pc, #152]	; (800259c <HAL_UART_MspInit+0x158>)
 8002502:	f000 fadd 	bl	8002ac0 <HAL_DMA_Init>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800250c:	f7ff ff6a 	bl	80023e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a22      	ldr	r2, [pc, #136]	; (800259c <HAL_UART_MspInit+0x158>)
 8002514:	635a      	str	r2, [r3, #52]	; 0x34
 8002516:	4a21      	ldr	r2, [pc, #132]	; (800259c <HAL_UART_MspInit+0x158>)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800251c:	4b21      	ldr	r3, [pc, #132]	; (80025a4 <HAL_UART_MspInit+0x160>)
 800251e:	4a22      	ldr	r2, [pc, #136]	; (80025a8 <HAL_UART_MspInit+0x164>)
 8002520:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002522:	4b20      	ldr	r3, [pc, #128]	; (80025a4 <HAL_UART_MspInit+0x160>)
 8002524:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002528:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800252a:	4b1e      	ldr	r3, [pc, #120]	; (80025a4 <HAL_UART_MspInit+0x160>)
 800252c:	2240      	movs	r2, #64	; 0x40
 800252e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002530:	4b1c      	ldr	r3, [pc, #112]	; (80025a4 <HAL_UART_MspInit+0x160>)
 8002532:	2200      	movs	r2, #0
 8002534:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002536:	4b1b      	ldr	r3, [pc, #108]	; (80025a4 <HAL_UART_MspInit+0x160>)
 8002538:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800253c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800253e:	4b19      	ldr	r3, [pc, #100]	; (80025a4 <HAL_UART_MspInit+0x160>)
 8002540:	2200      	movs	r2, #0
 8002542:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002544:	4b17      	ldr	r3, [pc, #92]	; (80025a4 <HAL_UART_MspInit+0x160>)
 8002546:	2200      	movs	r2, #0
 8002548:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800254a:	4b16      	ldr	r3, [pc, #88]	; (80025a4 <HAL_UART_MspInit+0x160>)
 800254c:	2200      	movs	r2, #0
 800254e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002550:	4b14      	ldr	r3, [pc, #80]	; (80025a4 <HAL_UART_MspInit+0x160>)
 8002552:	2200      	movs	r2, #0
 8002554:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002556:	4b13      	ldr	r3, [pc, #76]	; (80025a4 <HAL_UART_MspInit+0x160>)
 8002558:	2200      	movs	r2, #0
 800255a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800255c:	4811      	ldr	r0, [pc, #68]	; (80025a4 <HAL_UART_MspInit+0x160>)
 800255e:	f000 faaf 	bl	8002ac0 <HAL_DMA_Init>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8002568:	f7ff ff3c 	bl	80023e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a0d      	ldr	r2, [pc, #52]	; (80025a4 <HAL_UART_MspInit+0x160>)
 8002570:	631a      	str	r2, [r3, #48]	; 0x30
 8002572:	4a0c      	ldr	r2, [pc, #48]	; (80025a4 <HAL_UART_MspInit+0x160>)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002578:	2200      	movs	r2, #0
 800257a:	2100      	movs	r1, #0
 800257c:	2026      	movs	r0, #38	; 0x26
 800257e:	f000 fa68 	bl	8002a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002582:	2026      	movs	r0, #38	; 0x26
 8002584:	f000 fa81 	bl	8002a8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002588:	bf00      	nop
 800258a:	3728      	adds	r7, #40	; 0x28
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40004400 	.word	0x40004400
 8002594:	40023800 	.word	0x40023800
 8002598:	40020000 	.word	0x40020000
 800259c:	20000a10 	.word	0x20000a10
 80025a0:	40026088 	.word	0x40026088
 80025a4:	20000a70 	.word	0x20000a70
 80025a8:	400260a0 	.word	0x400260a0

080025ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80025b0:	bf00      	nop
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025ba:	b480      	push	{r7}
 80025bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025be:	e7fe      	b.n	80025be <HardFault_Handler+0x4>

080025c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025c4:	e7fe      	b.n	80025c4 <MemManage_Handler+0x4>

080025c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025c6:	b480      	push	{r7}
 80025c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025ca:	e7fe      	b.n	80025ca <BusFault_Handler+0x4>

080025cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025d0:	e7fe      	b.n	80025d0 <UsageFault_Handler+0x4>

080025d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025d2:	b480      	push	{r7}
 80025d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025d6:	bf00      	nop
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025e4:	bf00      	nop
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025ee:	b480      	push	{r7}
 80025f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025f2:	bf00      	nop
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002600:	f000 f90a 	bl	8002818 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002604:	bf00      	nop
 8002606:	bd80      	pop	{r7, pc}

08002608 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800260c:	4802      	ldr	r0, [pc, #8]	; (8002618 <DMA1_Stream5_IRQHandler+0x10>)
 800260e:	f000 fb7f 	bl	8002d10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20000a10 	.word	0x20000a10

0800261c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002620:	4802      	ldr	r0, [pc, #8]	; (800262c <DMA1_Stream6_IRQHandler+0x10>)
 8002622:	f000 fb75 	bl	8002d10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002626:	bf00      	nop
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	20000a70 	.word	0x20000a70

08002630 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002634:	4802      	ldr	r0, [pc, #8]	; (8002640 <USART2_IRQHandler+0x10>)
 8002636:	f001 fd3d 	bl	80040b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800263a:	bf00      	nop
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20000ad0 	.word	0x20000ad0

08002644 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
	return 1;
 8002648:	2301      	movs	r3, #1
}
 800264a:	4618      	mov	r0, r3
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <_kill>:

int _kill(int pid, int sig)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800265e:	f002 fbd9 	bl	8004e14 <__errno>
 8002662:	4602      	mov	r2, r0
 8002664:	2316      	movs	r3, #22
 8002666:	6013      	str	r3, [r2, #0]
	return -1;
 8002668:	f04f 33ff 	mov.w	r3, #4294967295
}
 800266c:	4618      	mov	r0, r3
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <_exit>:

void _exit (int status)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800267c:	f04f 31ff 	mov.w	r1, #4294967295
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7ff ffe7 	bl	8002654 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002686:	e7fe      	b.n	8002686 <_exit+0x12>

08002688 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002690:	4a14      	ldr	r2, [pc, #80]	; (80026e4 <_sbrk+0x5c>)
 8002692:	4b15      	ldr	r3, [pc, #84]	; (80026e8 <_sbrk+0x60>)
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800269c:	4b13      	ldr	r3, [pc, #76]	; (80026ec <_sbrk+0x64>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d102      	bne.n	80026aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026a4:	4b11      	ldr	r3, [pc, #68]	; (80026ec <_sbrk+0x64>)
 80026a6:	4a12      	ldr	r2, [pc, #72]	; (80026f0 <_sbrk+0x68>)
 80026a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026aa:	4b10      	ldr	r3, [pc, #64]	; (80026ec <_sbrk+0x64>)
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4413      	add	r3, r2
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d207      	bcs.n	80026c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026b8:	f002 fbac 	bl	8004e14 <__errno>
 80026bc:	4602      	mov	r2, r0
 80026be:	230c      	movs	r3, #12
 80026c0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80026c2:	f04f 33ff 	mov.w	r3, #4294967295
 80026c6:	e009      	b.n	80026dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026c8:	4b08      	ldr	r3, [pc, #32]	; (80026ec <_sbrk+0x64>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ce:	4b07      	ldr	r3, [pc, #28]	; (80026ec <_sbrk+0x64>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4413      	add	r3, r2
 80026d6:	4a05      	ldr	r2, [pc, #20]	; (80026ec <_sbrk+0x64>)
 80026d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026da:	68fb      	ldr	r3, [r7, #12]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	20020000 	.word	0x20020000
 80026e8:	00000400 	.word	0x00000400
 80026ec:	20000a04 	.word	0x20000a04
 80026f0:	20000b18 	.word	0x20000b18

080026f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026f8:	4b08      	ldr	r3, [pc, #32]	; (800271c <SystemInit+0x28>)
 80026fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fe:	4a07      	ldr	r2, [pc, #28]	; (800271c <SystemInit+0x28>)
 8002700:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002704:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002708:	4b04      	ldr	r3, [pc, #16]	; (800271c <SystemInit+0x28>)
 800270a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800270e:	609a      	str	r2, [r3, #8]
#endif
}
 8002710:	bf00      	nop
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	e000ed00 	.word	0xe000ed00

08002720 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002720:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002758 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002724:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002726:	e003      	b.n	8002730 <LoopCopyDataInit>

08002728 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002728:	4b0c      	ldr	r3, [pc, #48]	; (800275c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800272a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800272c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800272e:	3104      	adds	r1, #4

08002730 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002730:	480b      	ldr	r0, [pc, #44]	; (8002760 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002732:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002734:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002736:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002738:	d3f6      	bcc.n	8002728 <CopyDataInit>
  ldr  r2, =_sbss
 800273a:	4a0b      	ldr	r2, [pc, #44]	; (8002768 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800273c:	e002      	b.n	8002744 <LoopFillZerobss>

0800273e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800273e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002740:	f842 3b04 	str.w	r3, [r2], #4

08002744 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002744:	4b09      	ldr	r3, [pc, #36]	; (800276c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002746:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002748:	d3f9      	bcc.n	800273e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800274a:	f7ff ffd3 	bl	80026f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800274e:	f002 fb67 	bl	8004e20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002752:	f7ff fd06 	bl	8002162 <main>
  bx  lr    
 8002756:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002758:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800275c:	08005364 	.word	0x08005364
  ldr  r0, =_sdata
 8002760:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002764:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 8002768:	2000008c 	.word	0x2000008c
  ldr  r3, = _ebss
 800276c:	20000b18 	.word	0x20000b18

08002770 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002770:	e7fe      	b.n	8002770 <ADC_IRQHandler>
	...

08002774 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002778:	4b0e      	ldr	r3, [pc, #56]	; (80027b4 <HAL_Init+0x40>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a0d      	ldr	r2, [pc, #52]	; (80027b4 <HAL_Init+0x40>)
 800277e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002782:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HAL_Init+0x40>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <HAL_Init+0x40>)
 800278a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800278e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002790:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <HAL_Init+0x40>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a07      	ldr	r2, [pc, #28]	; (80027b4 <HAL_Init+0x40>)
 8002796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800279a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800279c:	2003      	movs	r0, #3
 800279e:	f000 f94d 	bl	8002a3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027a2:	2000      	movs	r0, #0
 80027a4:	f000 f808 	bl	80027b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027a8:	f7ff fe24 	bl	80023f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40023c00 	.word	0x40023c00

080027b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027c0:	4b12      	ldr	r3, [pc, #72]	; (800280c <HAL_InitTick+0x54>)
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4b12      	ldr	r3, [pc, #72]	; (8002810 <HAL_InitTick+0x58>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	4619      	mov	r1, r3
 80027ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80027d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 f965 	bl	8002aa6 <HAL_SYSTICK_Config>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e00e      	b.n	8002804 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b0f      	cmp	r3, #15
 80027ea:	d80a      	bhi.n	8002802 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027ec:	2200      	movs	r2, #0
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	f04f 30ff 	mov.w	r0, #4294967295
 80027f4:	f000 f92d 	bl	8002a52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027f8:	4a06      	ldr	r2, [pc, #24]	; (8002814 <HAL_InitTick+0x5c>)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
 8002800:	e000      	b.n	8002804 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
}
 8002804:	4618      	mov	r0, r3
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	20000018 	.word	0x20000018
 8002810:	20000020 	.word	0x20000020
 8002814:	2000001c 	.word	0x2000001c

08002818 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800281c:	4b06      	ldr	r3, [pc, #24]	; (8002838 <HAL_IncTick+0x20>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	461a      	mov	r2, r3
 8002822:	4b06      	ldr	r3, [pc, #24]	; (800283c <HAL_IncTick+0x24>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4413      	add	r3, r2
 8002828:	4a04      	ldr	r2, [pc, #16]	; (800283c <HAL_IncTick+0x24>)
 800282a:	6013      	str	r3, [r2, #0]
}
 800282c:	bf00      	nop
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	20000020 	.word	0x20000020
 800283c:	20000b10 	.word	0x20000b10

08002840 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  return uwTick;
 8002844:	4b03      	ldr	r3, [pc, #12]	; (8002854 <HAL_GetTick+0x14>)
 8002846:	681b      	ldr	r3, [r3, #0]
}
 8002848:	4618      	mov	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	20000b10 	.word	0x20000b10

08002858 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002860:	f7ff ffee 	bl	8002840 <HAL_GetTick>
 8002864:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002870:	d005      	beq.n	800287e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002872:	4b09      	ldr	r3, [pc, #36]	; (8002898 <HAL_Delay+0x40>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	461a      	mov	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4413      	add	r3, r2
 800287c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800287e:	bf00      	nop
 8002880:	f7ff ffde 	bl	8002840 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	429a      	cmp	r2, r3
 800288e:	d8f7      	bhi.n	8002880 <HAL_Delay+0x28>
  {
  }
}
 8002890:	bf00      	nop
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	20000020 	.word	0x20000020

0800289c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028ac:	4b0c      	ldr	r3, [pc, #48]	; (80028e0 <__NVIC_SetPriorityGrouping+0x44>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028b2:	68ba      	ldr	r2, [r7, #8]
 80028b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028b8:	4013      	ands	r3, r2
 80028ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028ce:	4a04      	ldr	r2, [pc, #16]	; (80028e0 <__NVIC_SetPriorityGrouping+0x44>)
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	60d3      	str	r3, [r2, #12]
}
 80028d4:	bf00      	nop
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	e000ed00 	.word	0xe000ed00

080028e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028e8:	4b04      	ldr	r3, [pc, #16]	; (80028fc <__NVIC_GetPriorityGrouping+0x18>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	0a1b      	lsrs	r3, r3, #8
 80028ee:	f003 0307 	and.w	r3, r3, #7
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	e000ed00 	.word	0xe000ed00

08002900 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	4603      	mov	r3, r0
 8002908:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800290a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290e:	2b00      	cmp	r3, #0
 8002910:	db0b      	blt.n	800292a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	f003 021f 	and.w	r2, r3, #31
 8002918:	4907      	ldr	r1, [pc, #28]	; (8002938 <__NVIC_EnableIRQ+0x38>)
 800291a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291e:	095b      	lsrs	r3, r3, #5
 8002920:	2001      	movs	r0, #1
 8002922:	fa00 f202 	lsl.w	r2, r0, r2
 8002926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	e000e100 	.word	0xe000e100

0800293c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	4603      	mov	r3, r0
 8002944:	6039      	str	r1, [r7, #0]
 8002946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294c:	2b00      	cmp	r3, #0
 800294e:	db0a      	blt.n	8002966 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	b2da      	uxtb	r2, r3
 8002954:	490c      	ldr	r1, [pc, #48]	; (8002988 <__NVIC_SetPriority+0x4c>)
 8002956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295a:	0112      	lsls	r2, r2, #4
 800295c:	b2d2      	uxtb	r2, r2
 800295e:	440b      	add	r3, r1
 8002960:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002964:	e00a      	b.n	800297c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	b2da      	uxtb	r2, r3
 800296a:	4908      	ldr	r1, [pc, #32]	; (800298c <__NVIC_SetPriority+0x50>)
 800296c:	79fb      	ldrb	r3, [r7, #7]
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	3b04      	subs	r3, #4
 8002974:	0112      	lsls	r2, r2, #4
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	440b      	add	r3, r1
 800297a:	761a      	strb	r2, [r3, #24]
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	e000e100 	.word	0xe000e100
 800298c:	e000ed00 	.word	0xe000ed00

08002990 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002990:	b480      	push	{r7}
 8002992:	b089      	sub	sp, #36	; 0x24
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	f1c3 0307 	rsb	r3, r3, #7
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	bf28      	it	cs
 80029ae:	2304      	movcs	r3, #4
 80029b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	3304      	adds	r3, #4
 80029b6:	2b06      	cmp	r3, #6
 80029b8:	d902      	bls.n	80029c0 <NVIC_EncodePriority+0x30>
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	3b03      	subs	r3, #3
 80029be:	e000      	b.n	80029c2 <NVIC_EncodePriority+0x32>
 80029c0:	2300      	movs	r3, #0
 80029c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c4:	f04f 32ff 	mov.w	r2, #4294967295
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43da      	mvns	r2, r3
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	401a      	ands	r2, r3
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029d8:	f04f 31ff 	mov.w	r1, #4294967295
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	fa01 f303 	lsl.w	r3, r1, r3
 80029e2:	43d9      	mvns	r1, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e8:	4313      	orrs	r3, r2
         );
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3724      	adds	r7, #36	; 0x24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
	...

080029f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a08:	d301      	bcc.n	8002a0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e00f      	b.n	8002a2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a0e:	4a0a      	ldr	r2, [pc, #40]	; (8002a38 <SysTick_Config+0x40>)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a16:	210f      	movs	r1, #15
 8002a18:	f04f 30ff 	mov.w	r0, #4294967295
 8002a1c:	f7ff ff8e 	bl	800293c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a20:	4b05      	ldr	r3, [pc, #20]	; (8002a38 <SysTick_Config+0x40>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a26:	4b04      	ldr	r3, [pc, #16]	; (8002a38 <SysTick_Config+0x40>)
 8002a28:	2207      	movs	r2, #7
 8002a2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	e000e010 	.word	0xe000e010

08002a3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7ff ff29 	bl	800289c <__NVIC_SetPriorityGrouping>
}
 8002a4a:	bf00      	nop
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b086      	sub	sp, #24
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	4603      	mov	r3, r0
 8002a5a:	60b9      	str	r1, [r7, #8]
 8002a5c:	607a      	str	r2, [r7, #4]
 8002a5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a64:	f7ff ff3e 	bl	80028e4 <__NVIC_GetPriorityGrouping>
 8002a68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	68b9      	ldr	r1, [r7, #8]
 8002a6e:	6978      	ldr	r0, [r7, #20]
 8002a70:	f7ff ff8e 	bl	8002990 <NVIC_EncodePriority>
 8002a74:	4602      	mov	r2, r0
 8002a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a7a:	4611      	mov	r1, r2
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff ff5d 	bl	800293c <__NVIC_SetPriority>
}
 8002a82:	bf00      	nop
 8002a84:	3718      	adds	r7, #24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b082      	sub	sp, #8
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	4603      	mov	r3, r0
 8002a92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff ff31 	bl	8002900 <__NVIC_EnableIRQ>
}
 8002a9e:	bf00      	nop
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b082      	sub	sp, #8
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7ff ffa2 	bl	80029f8 <SysTick_Config>
 8002ab4:	4603      	mov	r3, r0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002acc:	f7ff feb8 	bl	8002840 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e099      	b.n	8002c10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0201 	bic.w	r2, r2, #1
 8002afa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002afc:	e00f      	b.n	8002b1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002afe:	f7ff fe9f 	bl	8002840 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b05      	cmp	r3, #5
 8002b0a:	d908      	bls.n	8002b1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2203      	movs	r2, #3
 8002b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e078      	b.n	8002c10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1e8      	bne.n	8002afe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	4b38      	ldr	r3, [pc, #224]	; (8002c18 <HAL_DMA_Init+0x158>)
 8002b38:	4013      	ands	r3, r2
 8002b3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	2b04      	cmp	r3, #4
 8002b76:	d107      	bne.n	8002b88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b80:	4313      	orrs	r3, r2
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	f023 0307 	bic.w	r3, r3, #7
 8002b9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d117      	bne.n	8002be2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00e      	beq.n	8002be2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 fa91 	bl	80030ec <DMA_CheckFifoParam>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d008      	beq.n	8002be2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2240      	movs	r2, #64	; 0x40
 8002bd4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002bde:	2301      	movs	r3, #1
 8002be0:	e016      	b.n	8002c10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 fa48 	bl	8003080 <DMA_CalcBaseAndBitshift>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf8:	223f      	movs	r2, #63	; 0x3f
 8002bfa:	409a      	lsls	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3718      	adds	r7, #24
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	f010803f 	.word	0xf010803f

08002c1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
 8002c28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c32:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d101      	bne.n	8002c42 <HAL_DMA_Start_IT+0x26>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e040      	b.n	8002cc4 <HAL_DMA_Start_IT+0xa8>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d12f      	bne.n	8002cb6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2202      	movs	r2, #2
 8002c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	68b9      	ldr	r1, [r7, #8]
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 f9da 	bl	8003024 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c74:	223f      	movs	r2, #63	; 0x3f
 8002c76:	409a      	lsls	r2, r3
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f042 0216 	orr.w	r2, r2, #22
 8002c8a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d007      	beq.n	8002ca4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f042 0208 	orr.w	r2, r2, #8
 8002ca2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0201 	orr.w	r2, r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	e005      	b.n	8002cc2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d004      	beq.n	8002cea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2280      	movs	r2, #128	; 0x80
 8002ce4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e00c      	b.n	8002d04 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2205      	movs	r2, #5
 8002cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 0201 	bic.w	r2, r2, #1
 8002d00:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d1c:	4b92      	ldr	r3, [pc, #584]	; (8002f68 <HAL_DMA_IRQHandler+0x258>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a92      	ldr	r2, [pc, #584]	; (8002f6c <HAL_DMA_IRQHandler+0x25c>)
 8002d22:	fba2 2303 	umull	r2, r3, r2, r3
 8002d26:	0a9b      	lsrs	r3, r3, #10
 8002d28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d3a:	2208      	movs	r2, #8
 8002d3c:	409a      	lsls	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	4013      	ands	r3, r2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d01a      	beq.n	8002d7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0304 	and.w	r3, r3, #4
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d013      	beq.n	8002d7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0204 	bic.w	r2, r2, #4
 8002d62:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d68:	2208      	movs	r2, #8
 8002d6a:	409a      	lsls	r2, r3
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d74:	f043 0201 	orr.w	r2, r3, #1
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d80:	2201      	movs	r2, #1
 8002d82:	409a      	lsls	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4013      	ands	r3, r2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d012      	beq.n	8002db2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00b      	beq.n	8002db2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d9e:	2201      	movs	r2, #1
 8002da0:	409a      	lsls	r2, r3
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002daa:	f043 0202 	orr.w	r2, r3, #2
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db6:	2204      	movs	r2, #4
 8002db8:	409a      	lsls	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d012      	beq.n	8002de8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00b      	beq.n	8002de8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd4:	2204      	movs	r2, #4
 8002dd6:	409a      	lsls	r2, r3
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de0:	f043 0204 	orr.w	r2, r3, #4
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dec:	2210      	movs	r2, #16
 8002dee:	409a      	lsls	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4013      	ands	r3, r2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d043      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d03c      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e0a:	2210      	movs	r2, #16
 8002e0c:	409a      	lsls	r2, r3
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d018      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d108      	bne.n	8002e40 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d024      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	4798      	blx	r3
 8002e3e:	e01f      	b.n	8002e80 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d01b      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	4798      	blx	r3
 8002e50:	e016      	b.n	8002e80 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d107      	bne.n	8002e70 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 0208 	bic.w	r2, r2, #8
 8002e6e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d003      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e84:	2220      	movs	r2, #32
 8002e86:	409a      	lsls	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 808e 	beq.w	8002fae <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0310 	and.w	r3, r3, #16
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 8086 	beq.w	8002fae <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	409a      	lsls	r2, r3
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b05      	cmp	r3, #5
 8002eb8:	d136      	bne.n	8002f28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0216 	bic.w	r2, r2, #22
 8002ec8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	695a      	ldr	r2, [r3, #20]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ed8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d103      	bne.n	8002eea <HAL_DMA_IRQHandler+0x1da>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d007      	beq.n	8002efa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0208 	bic.w	r2, r2, #8
 8002ef8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efe:	223f      	movs	r2, #63	; 0x3f
 8002f00:	409a      	lsls	r2, r3
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d07d      	beq.n	800301a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	4798      	blx	r3
        }
        return;
 8002f26:	e078      	b.n	800301a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d01c      	beq.n	8002f70 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d108      	bne.n	8002f56 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d030      	beq.n	8002fae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	4798      	blx	r3
 8002f54:	e02b      	b.n	8002fae <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d027      	beq.n	8002fae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	4798      	blx	r3
 8002f66:	e022      	b.n	8002fae <HAL_DMA_IRQHandler+0x29e>
 8002f68:	20000018 	.word	0x20000018
 8002f6c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10f      	bne.n	8002f9e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 0210 	bic.w	r2, r2, #16
 8002f8c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d032      	beq.n	800301c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d022      	beq.n	8003008 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2205      	movs	r2, #5
 8002fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 0201 	bic.w	r2, r2, #1
 8002fd8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	60bb      	str	r3, [r7, #8]
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d307      	bcc.n	8002ff6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1f2      	bne.n	8002fda <HAL_DMA_IRQHandler+0x2ca>
 8002ff4:	e000      	b.n	8002ff8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002ff6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800300c:	2b00      	cmp	r3, #0
 800300e:	d005      	beq.n	800301c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	4798      	blx	r3
 8003018:	e000      	b.n	800301c <HAL_DMA_IRQHandler+0x30c>
        return;
 800301a:	bf00      	nop
    }
  }
}
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop

08003024 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
 8003030:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003040:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	2b40      	cmp	r3, #64	; 0x40
 8003050:	d108      	bne.n	8003064 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003062:	e007      	b.n	8003074 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	60da      	str	r2, [r3, #12]
}
 8003074:	bf00      	nop
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	b2db      	uxtb	r3, r3
 800308e:	3b10      	subs	r3, #16
 8003090:	4a14      	ldr	r2, [pc, #80]	; (80030e4 <DMA_CalcBaseAndBitshift+0x64>)
 8003092:	fba2 2303 	umull	r2, r3, r2, r3
 8003096:	091b      	lsrs	r3, r3, #4
 8003098:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800309a:	4a13      	ldr	r2, [pc, #76]	; (80030e8 <DMA_CalcBaseAndBitshift+0x68>)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	4413      	add	r3, r2
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	461a      	mov	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2b03      	cmp	r3, #3
 80030ac:	d909      	bls.n	80030c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030b6:	f023 0303 	bic.w	r3, r3, #3
 80030ba:	1d1a      	adds	r2, r3, #4
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	659a      	str	r2, [r3, #88]	; 0x58
 80030c0:	e007      	b.n	80030d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030ca:	f023 0303 	bic.w	r3, r3, #3
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3714      	adds	r7, #20
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	aaaaaaab 	.word	0xaaaaaaab
 80030e8:	08005348 	.word	0x08005348

080030ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030f4:	2300      	movs	r3, #0
 80030f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d11f      	bne.n	8003146 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	2b03      	cmp	r3, #3
 800310a:	d855      	bhi.n	80031b8 <DMA_CheckFifoParam+0xcc>
 800310c:	a201      	add	r2, pc, #4	; (adr r2, 8003114 <DMA_CheckFifoParam+0x28>)
 800310e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003112:	bf00      	nop
 8003114:	08003125 	.word	0x08003125
 8003118:	08003137 	.word	0x08003137
 800311c:	08003125 	.word	0x08003125
 8003120:	080031b9 	.word	0x080031b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003128:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d045      	beq.n	80031bc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003134:	e042      	b.n	80031bc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800313e:	d13f      	bne.n	80031c0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003144:	e03c      	b.n	80031c0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800314e:	d121      	bne.n	8003194 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2b03      	cmp	r3, #3
 8003154:	d836      	bhi.n	80031c4 <DMA_CheckFifoParam+0xd8>
 8003156:	a201      	add	r2, pc, #4	; (adr r2, 800315c <DMA_CheckFifoParam+0x70>)
 8003158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800315c:	0800316d 	.word	0x0800316d
 8003160:	08003173 	.word	0x08003173
 8003164:	0800316d 	.word	0x0800316d
 8003168:	08003185 	.word	0x08003185
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	73fb      	strb	r3, [r7, #15]
      break;
 8003170:	e02f      	b.n	80031d2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003176:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d024      	beq.n	80031c8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003182:	e021      	b.n	80031c8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003188:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800318c:	d11e      	bne.n	80031cc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003192:	e01b      	b.n	80031cc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	2b02      	cmp	r3, #2
 8003198:	d902      	bls.n	80031a0 <DMA_CheckFifoParam+0xb4>
 800319a:	2b03      	cmp	r3, #3
 800319c:	d003      	beq.n	80031a6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800319e:	e018      	b.n	80031d2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	73fb      	strb	r3, [r7, #15]
      break;
 80031a4:	e015      	b.n	80031d2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00e      	beq.n	80031d0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	73fb      	strb	r3, [r7, #15]
      break;
 80031b6:	e00b      	b.n	80031d0 <DMA_CheckFifoParam+0xe4>
      break;
 80031b8:	bf00      	nop
 80031ba:	e00a      	b.n	80031d2 <DMA_CheckFifoParam+0xe6>
      break;
 80031bc:	bf00      	nop
 80031be:	e008      	b.n	80031d2 <DMA_CheckFifoParam+0xe6>
      break;
 80031c0:	bf00      	nop
 80031c2:	e006      	b.n	80031d2 <DMA_CheckFifoParam+0xe6>
      break;
 80031c4:	bf00      	nop
 80031c6:	e004      	b.n	80031d2 <DMA_CheckFifoParam+0xe6>
      break;
 80031c8:	bf00      	nop
 80031ca:	e002      	b.n	80031d2 <DMA_CheckFifoParam+0xe6>
      break;   
 80031cc:	bf00      	nop
 80031ce:	e000      	b.n	80031d2 <DMA_CheckFifoParam+0xe6>
      break;
 80031d0:	bf00      	nop
    }
  } 
  
  return status; 
 80031d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b089      	sub	sp, #36	; 0x24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031ee:	2300      	movs	r3, #0
 80031f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031f6:	2300      	movs	r3, #0
 80031f8:	61fb      	str	r3, [r7, #28]
 80031fa:	e16b      	b.n	80034d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031fc:	2201      	movs	r2, #1
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	4013      	ands	r3, r2
 800320e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	429a      	cmp	r2, r3
 8003216:	f040 815a 	bne.w	80034ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d00b      	beq.n	800323a <HAL_GPIO_Init+0x5a>
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b02      	cmp	r3, #2
 8003228:	d007      	beq.n	800323a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800322e:	2b11      	cmp	r3, #17
 8003230:	d003      	beq.n	800323a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b12      	cmp	r3, #18
 8003238:	d130      	bne.n	800329c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	2203      	movs	r2, #3
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	43db      	mvns	r3, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4013      	ands	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	68da      	ldr	r2, [r3, #12]
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	4313      	orrs	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003270:	2201      	movs	r2, #1
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	43db      	mvns	r3, r3
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	4013      	ands	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	091b      	lsrs	r3, r3, #4
 8003286:	f003 0201 	and.w	r2, r3, #1
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	4313      	orrs	r3, r2
 8003294:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	2203      	movs	r2, #3
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	43db      	mvns	r3, r3
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	4013      	ands	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d003      	beq.n	80032dc <HAL_GPIO_Init+0xfc>
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	2b12      	cmp	r3, #18
 80032da:	d123      	bne.n	8003324 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	08da      	lsrs	r2, r3, #3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3208      	adds	r2, #8
 80032e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	220f      	movs	r2, #15
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	43db      	mvns	r3, r3
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	4013      	ands	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	691a      	ldr	r2, [r3, #16]
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	4313      	orrs	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	08da      	lsrs	r2, r3, #3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	3208      	adds	r2, #8
 800331e:	69b9      	ldr	r1, [r7, #24]
 8003320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	2203      	movs	r2, #3
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	43db      	mvns	r3, r3
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	4013      	ands	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f003 0203 	and.w	r2, r3, #3
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4313      	orrs	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 80b4 	beq.w	80034ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003366:	2300      	movs	r3, #0
 8003368:	60fb      	str	r3, [r7, #12]
 800336a:	4b5f      	ldr	r3, [pc, #380]	; (80034e8 <HAL_GPIO_Init+0x308>)
 800336c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336e:	4a5e      	ldr	r2, [pc, #376]	; (80034e8 <HAL_GPIO_Init+0x308>)
 8003370:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003374:	6453      	str	r3, [r2, #68]	; 0x44
 8003376:	4b5c      	ldr	r3, [pc, #368]	; (80034e8 <HAL_GPIO_Init+0x308>)
 8003378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003382:	4a5a      	ldr	r2, [pc, #360]	; (80034ec <HAL_GPIO_Init+0x30c>)
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	089b      	lsrs	r3, r3, #2
 8003388:	3302      	adds	r3, #2
 800338a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800338e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	f003 0303 	and.w	r3, r3, #3
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	220f      	movs	r2, #15
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	43db      	mvns	r3, r3
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4013      	ands	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a51      	ldr	r2, [pc, #324]	; (80034f0 <HAL_GPIO_Init+0x310>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d02b      	beq.n	8003406 <HAL_GPIO_Init+0x226>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a50      	ldr	r2, [pc, #320]	; (80034f4 <HAL_GPIO_Init+0x314>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d025      	beq.n	8003402 <HAL_GPIO_Init+0x222>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a4f      	ldr	r2, [pc, #316]	; (80034f8 <HAL_GPIO_Init+0x318>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d01f      	beq.n	80033fe <HAL_GPIO_Init+0x21e>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a4e      	ldr	r2, [pc, #312]	; (80034fc <HAL_GPIO_Init+0x31c>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d019      	beq.n	80033fa <HAL_GPIO_Init+0x21a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a4d      	ldr	r2, [pc, #308]	; (8003500 <HAL_GPIO_Init+0x320>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d013      	beq.n	80033f6 <HAL_GPIO_Init+0x216>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a4c      	ldr	r2, [pc, #304]	; (8003504 <HAL_GPIO_Init+0x324>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d00d      	beq.n	80033f2 <HAL_GPIO_Init+0x212>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a4b      	ldr	r2, [pc, #300]	; (8003508 <HAL_GPIO_Init+0x328>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d007      	beq.n	80033ee <HAL_GPIO_Init+0x20e>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a4a      	ldr	r2, [pc, #296]	; (800350c <HAL_GPIO_Init+0x32c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d101      	bne.n	80033ea <HAL_GPIO_Init+0x20a>
 80033e6:	2307      	movs	r3, #7
 80033e8:	e00e      	b.n	8003408 <HAL_GPIO_Init+0x228>
 80033ea:	2308      	movs	r3, #8
 80033ec:	e00c      	b.n	8003408 <HAL_GPIO_Init+0x228>
 80033ee:	2306      	movs	r3, #6
 80033f0:	e00a      	b.n	8003408 <HAL_GPIO_Init+0x228>
 80033f2:	2305      	movs	r3, #5
 80033f4:	e008      	b.n	8003408 <HAL_GPIO_Init+0x228>
 80033f6:	2304      	movs	r3, #4
 80033f8:	e006      	b.n	8003408 <HAL_GPIO_Init+0x228>
 80033fa:	2303      	movs	r3, #3
 80033fc:	e004      	b.n	8003408 <HAL_GPIO_Init+0x228>
 80033fe:	2302      	movs	r3, #2
 8003400:	e002      	b.n	8003408 <HAL_GPIO_Init+0x228>
 8003402:	2301      	movs	r3, #1
 8003404:	e000      	b.n	8003408 <HAL_GPIO_Init+0x228>
 8003406:	2300      	movs	r3, #0
 8003408:	69fa      	ldr	r2, [r7, #28]
 800340a:	f002 0203 	and.w	r2, r2, #3
 800340e:	0092      	lsls	r2, r2, #2
 8003410:	4093      	lsls	r3, r2
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	4313      	orrs	r3, r2
 8003416:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003418:	4934      	ldr	r1, [pc, #208]	; (80034ec <HAL_GPIO_Init+0x30c>)
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	089b      	lsrs	r3, r3, #2
 800341e:	3302      	adds	r3, #2
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003426:	4b3a      	ldr	r3, [pc, #232]	; (8003510 <HAL_GPIO_Init+0x330>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	43db      	mvns	r3, r3
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4013      	ands	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	4313      	orrs	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800344a:	4a31      	ldr	r2, [pc, #196]	; (8003510 <HAL_GPIO_Init+0x330>)
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003450:	4b2f      	ldr	r3, [pc, #188]	; (8003510 <HAL_GPIO_Init+0x330>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	43db      	mvns	r3, r3
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	4013      	ands	r3, r2
 800345e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d003      	beq.n	8003474 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	4313      	orrs	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003474:	4a26      	ldr	r2, [pc, #152]	; (8003510 <HAL_GPIO_Init+0x330>)
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800347a:	4b25      	ldr	r3, [pc, #148]	; (8003510 <HAL_GPIO_Init+0x330>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	43db      	mvns	r3, r3
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	4013      	ands	r3, r2
 8003488:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d003      	beq.n	800349e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	4313      	orrs	r3, r2
 800349c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800349e:	4a1c      	ldr	r2, [pc, #112]	; (8003510 <HAL_GPIO_Init+0x330>)
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034a4:	4b1a      	ldr	r3, [pc, #104]	; (8003510 <HAL_GPIO_Init+0x330>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	43db      	mvns	r3, r3
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	4013      	ands	r3, r2
 80034b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d003      	beq.n	80034c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034c8:	4a11      	ldr	r2, [pc, #68]	; (8003510 <HAL_GPIO_Init+0x330>)
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	3301      	adds	r3, #1
 80034d2:	61fb      	str	r3, [r7, #28]
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	2b0f      	cmp	r3, #15
 80034d8:	f67f ae90 	bls.w	80031fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034dc:	bf00      	nop
 80034de:	3724      	adds	r7, #36	; 0x24
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	40023800 	.word	0x40023800
 80034ec:	40013800 	.word	0x40013800
 80034f0:	40020000 	.word	0x40020000
 80034f4:	40020400 	.word	0x40020400
 80034f8:	40020800 	.word	0x40020800
 80034fc:	40020c00 	.word	0x40020c00
 8003500:	40021000 	.word	0x40021000
 8003504:	40021400 	.word	0x40021400
 8003508:	40021800 	.word	0x40021800
 800350c:	40021c00 	.word	0x40021c00
 8003510:	40013c00 	.word	0x40013c00

08003514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	460b      	mov	r3, r1
 800351e:	807b      	strh	r3, [r7, #2]
 8003520:	4613      	mov	r3, r2
 8003522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003524:	787b      	ldrb	r3, [r7, #1]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800352a:	887a      	ldrh	r2, [r7, #2]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003530:	e003      	b.n	800353a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003532:	887b      	ldrh	r3, [r7, #2]
 8003534:	041a      	lsls	r2, r3, #16
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	619a      	str	r2, [r3, #24]
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003546:	b480      	push	{r7}
 8003548:	b083      	sub	sp, #12
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
 800354e:	460b      	mov	r3, r1
 8003550:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	695a      	ldr	r2, [r3, #20]
 8003556:	887b      	ldrh	r3, [r7, #2]
 8003558:	401a      	ands	r2, r3
 800355a:	887b      	ldrh	r3, [r7, #2]
 800355c:	429a      	cmp	r2, r3
 800355e:	d104      	bne.n	800356a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003560:	887b      	ldrh	r3, [r7, #2]
 8003562:	041a      	lsls	r2, r3, #16
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003568:	e002      	b.n	8003570 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800356a:	887a      	ldrh	r2, [r7, #2]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	619a      	str	r2, [r3, #24]
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e25b      	b.n	8003a46 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d075      	beq.n	8003686 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800359a:	4ba3      	ldr	r3, [pc, #652]	; (8003828 <HAL_RCC_OscConfig+0x2ac>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 030c 	and.w	r3, r3, #12
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d00c      	beq.n	80035c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035a6:	4ba0      	ldr	r3, [pc, #640]	; (8003828 <HAL_RCC_OscConfig+0x2ac>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035ae:	2b08      	cmp	r3, #8
 80035b0:	d112      	bne.n	80035d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035b2:	4b9d      	ldr	r3, [pc, #628]	; (8003828 <HAL_RCC_OscConfig+0x2ac>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035be:	d10b      	bne.n	80035d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c0:	4b99      	ldr	r3, [pc, #612]	; (8003828 <HAL_RCC_OscConfig+0x2ac>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d05b      	beq.n	8003684 <HAL_RCC_OscConfig+0x108>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d157      	bne.n	8003684 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e236      	b.n	8003a46 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035e0:	d106      	bne.n	80035f0 <HAL_RCC_OscConfig+0x74>
 80035e2:	4b91      	ldr	r3, [pc, #580]	; (8003828 <HAL_RCC_OscConfig+0x2ac>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a90      	ldr	r2, [pc, #576]	; (8003828 <HAL_RCC_OscConfig+0x2ac>)
 80035e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ec:	6013      	str	r3, [r2, #0]
 80035ee:	e01d      	b.n	800362c <HAL_RCC_OscConfig+0xb0>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035f8:	d10c      	bne.n	8003614 <HAL_RCC_OscConfig+0x98>
 80035fa:	4b8b      	ldr	r3, [pc, #556]	; (8003828 <HAL_RCC_OscConfig+0x2ac>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a8a      	ldr	r2, [pc, #552]	; (8003828 <HAL_RCC_OscConfig+0x2ac>)
 8003600:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003604:	6013      	str	r3, [r2, #0]
 8003606:	4b88      	ldr	r3, [pc, #544]	; (8003828 <HAL_RCC_OscConfig+0x2ac>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a87      	ldr	r2, [pc, #540]	; (8003828 <HAL_RCC_OscConfig+0x2ac>)
 800360c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	e00b      	b.n	800362c <HAL_RCC_OscConfig+0xb0>
 8003614:	4b84      	ldr	r3, [pc, #528]	; (8003828 <HAL_RCC_OscConfig+0x2ac>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a83      	ldr	r2, [pc, #524]	; (8003828 <HAL_RCC_OscConfig+0x2ac>)
 800361a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800361e:	6013      	str	r3, [r2, #0]
 8003620:	4b81      	ldr	r3, [pc, #516]	; (8003828 <HAL_RCC_OscConfig+0x2ac>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a80      	ldr	r2, [pc, #512]	; (8003828 <HAL_RCC_OscConfig+0x2ac>)
 8003626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800362a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d013      	beq.n	800365c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003634:	f7ff f904 	bl	8002840 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800363c:	f7ff f900 	bl	8002840 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b64      	cmp	r3, #100	; 0x64
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e1fb      	b.n	8003a46 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800364e:	4b76      	ldr	r3, [pc, #472]	; (8003828 <HAL_RCC_OscConfig+0x2ac>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d0f0      	beq.n	800363c <HAL_RCC_OscConfig+0xc0>
 800365a:	e014      	b.n	8003686 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365c:	f7ff f8f0 	bl	8002840 <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003664:	f7ff f8ec 	bl	8002840 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b64      	cmp	r3, #100	; 0x64
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e1e7      	b.n	8003a46 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003676:	4b6c      	ldr	r3, [pc, #432]	; (8003828 <HAL_RCC_OscConfig+0x2ac>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f0      	bne.n	8003664 <HAL_RCC_OscConfig+0xe8>
 8003682:	e000      	b.n	8003686 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d063      	beq.n	800375a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003692:	4b65      	ldr	r3, [pc, #404]	; (8003828 <HAL_RCC_OscConfig+0x2ac>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 030c 	and.w	r3, r3, #12
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00b      	beq.n	80036b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800369e:	4b62      	ldr	r3, [pc, #392]	; (8003828 <HAL_RCC_OscConfig+0x2ac>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036a6:	2b08      	cmp	r3, #8
 80036a8:	d11c      	bne.n	80036e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036aa:	4b5f      	ldr	r3, [pc, #380]	; (8003828 <HAL_RCC_OscConfig+0x2ac>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d116      	bne.n	80036e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036b6:	4b5c      	ldr	r3, [pc, #368]	; (8003828 <HAL_RCC_OscConfig+0x2ac>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d005      	beq.n	80036ce <HAL_RCC_OscConfig+0x152>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d001      	beq.n	80036ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e1bb      	b.n	8003a46 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ce:	4b56      	ldr	r3, [pc, #344]	; (8003828 <HAL_RCC_OscConfig+0x2ac>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	4952      	ldr	r1, [pc, #328]	; (8003828 <HAL_RCC_OscConfig+0x2ac>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036e2:	e03a      	b.n	800375a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d020      	beq.n	800372e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036ec:	4b4f      	ldr	r3, [pc, #316]	; (800382c <HAL_RCC_OscConfig+0x2b0>)
 80036ee:	2201      	movs	r2, #1
 80036f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f2:	f7ff f8a5 	bl	8002840 <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036fa:	f7ff f8a1 	bl	8002840 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e19c      	b.n	8003a46 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800370c:	4b46      	ldr	r3, [pc, #280]	; (8003828 <HAL_RCC_OscConfig+0x2ac>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0f0      	beq.n	80036fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003718:	4b43      	ldr	r3, [pc, #268]	; (8003828 <HAL_RCC_OscConfig+0x2ac>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	4940      	ldr	r1, [pc, #256]	; (8003828 <HAL_RCC_OscConfig+0x2ac>)
 8003728:	4313      	orrs	r3, r2
 800372a:	600b      	str	r3, [r1, #0]
 800372c:	e015      	b.n	800375a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800372e:	4b3f      	ldr	r3, [pc, #252]	; (800382c <HAL_RCC_OscConfig+0x2b0>)
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003734:	f7ff f884 	bl	8002840 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800373c:	f7ff f880 	bl	8002840 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e17b      	b.n	8003a46 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800374e:	4b36      	ldr	r3, [pc, #216]	; (8003828 <HAL_RCC_OscConfig+0x2ac>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1f0      	bne.n	800373c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b00      	cmp	r3, #0
 8003764:	d030      	beq.n	80037c8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d016      	beq.n	800379c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800376e:	4b30      	ldr	r3, [pc, #192]	; (8003830 <HAL_RCC_OscConfig+0x2b4>)
 8003770:	2201      	movs	r2, #1
 8003772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003774:	f7ff f864 	bl	8002840 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800377c:	f7ff f860 	bl	8002840 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e15b      	b.n	8003a46 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800378e:	4b26      	ldr	r3, [pc, #152]	; (8003828 <HAL_RCC_OscConfig+0x2ac>)
 8003790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0f0      	beq.n	800377c <HAL_RCC_OscConfig+0x200>
 800379a:	e015      	b.n	80037c8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800379c:	4b24      	ldr	r3, [pc, #144]	; (8003830 <HAL_RCC_OscConfig+0x2b4>)
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037a2:	f7ff f84d 	bl	8002840 <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a8:	e008      	b.n	80037bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037aa:	f7ff f849 	bl	8002840 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e144      	b.n	8003a46 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037bc:	4b1a      	ldr	r3, [pc, #104]	; (8003828 <HAL_RCC_OscConfig+0x2ac>)
 80037be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1f0      	bne.n	80037aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0304 	and.w	r3, r3, #4
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 80a0 	beq.w	8003916 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037d6:	2300      	movs	r3, #0
 80037d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037da:	4b13      	ldr	r3, [pc, #76]	; (8003828 <HAL_RCC_OscConfig+0x2ac>)
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10f      	bne.n	8003806 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037e6:	2300      	movs	r3, #0
 80037e8:	60bb      	str	r3, [r7, #8]
 80037ea:	4b0f      	ldr	r3, [pc, #60]	; (8003828 <HAL_RCC_OscConfig+0x2ac>)
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	4a0e      	ldr	r2, [pc, #56]	; (8003828 <HAL_RCC_OscConfig+0x2ac>)
 80037f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037f4:	6413      	str	r3, [r2, #64]	; 0x40
 80037f6:	4b0c      	ldr	r3, [pc, #48]	; (8003828 <HAL_RCC_OscConfig+0x2ac>)
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037fe:	60bb      	str	r3, [r7, #8]
 8003800:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003802:	2301      	movs	r3, #1
 8003804:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003806:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <HAL_RCC_OscConfig+0x2b8>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380e:	2b00      	cmp	r3, #0
 8003810:	d121      	bne.n	8003856 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003812:	4b08      	ldr	r3, [pc, #32]	; (8003834 <HAL_RCC_OscConfig+0x2b8>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a07      	ldr	r2, [pc, #28]	; (8003834 <HAL_RCC_OscConfig+0x2b8>)
 8003818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800381c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800381e:	f7ff f80f 	bl	8002840 <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003824:	e011      	b.n	800384a <HAL_RCC_OscConfig+0x2ce>
 8003826:	bf00      	nop
 8003828:	40023800 	.word	0x40023800
 800382c:	42470000 	.word	0x42470000
 8003830:	42470e80 	.word	0x42470e80
 8003834:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003838:	f7ff f802 	bl	8002840 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e0fd      	b.n	8003a46 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800384a:	4b81      	ldr	r3, [pc, #516]	; (8003a50 <HAL_RCC_OscConfig+0x4d4>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0f0      	beq.n	8003838 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d106      	bne.n	800386c <HAL_RCC_OscConfig+0x2f0>
 800385e:	4b7d      	ldr	r3, [pc, #500]	; (8003a54 <HAL_RCC_OscConfig+0x4d8>)
 8003860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003862:	4a7c      	ldr	r2, [pc, #496]	; (8003a54 <HAL_RCC_OscConfig+0x4d8>)
 8003864:	f043 0301 	orr.w	r3, r3, #1
 8003868:	6713      	str	r3, [r2, #112]	; 0x70
 800386a:	e01c      	b.n	80038a6 <HAL_RCC_OscConfig+0x32a>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	2b05      	cmp	r3, #5
 8003872:	d10c      	bne.n	800388e <HAL_RCC_OscConfig+0x312>
 8003874:	4b77      	ldr	r3, [pc, #476]	; (8003a54 <HAL_RCC_OscConfig+0x4d8>)
 8003876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003878:	4a76      	ldr	r2, [pc, #472]	; (8003a54 <HAL_RCC_OscConfig+0x4d8>)
 800387a:	f043 0304 	orr.w	r3, r3, #4
 800387e:	6713      	str	r3, [r2, #112]	; 0x70
 8003880:	4b74      	ldr	r3, [pc, #464]	; (8003a54 <HAL_RCC_OscConfig+0x4d8>)
 8003882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003884:	4a73      	ldr	r2, [pc, #460]	; (8003a54 <HAL_RCC_OscConfig+0x4d8>)
 8003886:	f043 0301 	orr.w	r3, r3, #1
 800388a:	6713      	str	r3, [r2, #112]	; 0x70
 800388c:	e00b      	b.n	80038a6 <HAL_RCC_OscConfig+0x32a>
 800388e:	4b71      	ldr	r3, [pc, #452]	; (8003a54 <HAL_RCC_OscConfig+0x4d8>)
 8003890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003892:	4a70      	ldr	r2, [pc, #448]	; (8003a54 <HAL_RCC_OscConfig+0x4d8>)
 8003894:	f023 0301 	bic.w	r3, r3, #1
 8003898:	6713      	str	r3, [r2, #112]	; 0x70
 800389a:	4b6e      	ldr	r3, [pc, #440]	; (8003a54 <HAL_RCC_OscConfig+0x4d8>)
 800389c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389e:	4a6d      	ldr	r2, [pc, #436]	; (8003a54 <HAL_RCC_OscConfig+0x4d8>)
 80038a0:	f023 0304 	bic.w	r3, r3, #4
 80038a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d015      	beq.n	80038da <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ae:	f7fe ffc7 	bl	8002840 <HAL_GetTick>
 80038b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b4:	e00a      	b.n	80038cc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038b6:	f7fe ffc3 	bl	8002840 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e0bc      	b.n	8003a46 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038cc:	4b61      	ldr	r3, [pc, #388]	; (8003a54 <HAL_RCC_OscConfig+0x4d8>)
 80038ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0ee      	beq.n	80038b6 <HAL_RCC_OscConfig+0x33a>
 80038d8:	e014      	b.n	8003904 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038da:	f7fe ffb1 	bl	8002840 <HAL_GetTick>
 80038de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038e0:	e00a      	b.n	80038f8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038e2:	f7fe ffad 	bl	8002840 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e0a6      	b.n	8003a46 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f8:	4b56      	ldr	r3, [pc, #344]	; (8003a54 <HAL_RCC_OscConfig+0x4d8>)
 80038fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1ee      	bne.n	80038e2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003904:	7dfb      	ldrb	r3, [r7, #23]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d105      	bne.n	8003916 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800390a:	4b52      	ldr	r3, [pc, #328]	; (8003a54 <HAL_RCC_OscConfig+0x4d8>)
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	4a51      	ldr	r2, [pc, #324]	; (8003a54 <HAL_RCC_OscConfig+0x4d8>)
 8003910:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003914:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	2b00      	cmp	r3, #0
 800391c:	f000 8092 	beq.w	8003a44 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003920:	4b4c      	ldr	r3, [pc, #304]	; (8003a54 <HAL_RCC_OscConfig+0x4d8>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f003 030c 	and.w	r3, r3, #12
 8003928:	2b08      	cmp	r3, #8
 800392a:	d05c      	beq.n	80039e6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	2b02      	cmp	r3, #2
 8003932:	d141      	bne.n	80039b8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003934:	4b48      	ldr	r3, [pc, #288]	; (8003a58 <HAL_RCC_OscConfig+0x4dc>)
 8003936:	2200      	movs	r2, #0
 8003938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800393a:	f7fe ff81 	bl	8002840 <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003940:	e008      	b.n	8003954 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003942:	f7fe ff7d 	bl	8002840 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e078      	b.n	8003a46 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003954:	4b3f      	ldr	r3, [pc, #252]	; (8003a54 <HAL_RCC_OscConfig+0x4d8>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1f0      	bne.n	8003942 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	69da      	ldr	r2, [r3, #28]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	431a      	orrs	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396e:	019b      	lsls	r3, r3, #6
 8003970:	431a      	orrs	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003976:	085b      	lsrs	r3, r3, #1
 8003978:	3b01      	subs	r3, #1
 800397a:	041b      	lsls	r3, r3, #16
 800397c:	431a      	orrs	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003982:	061b      	lsls	r3, r3, #24
 8003984:	4933      	ldr	r1, [pc, #204]	; (8003a54 <HAL_RCC_OscConfig+0x4d8>)
 8003986:	4313      	orrs	r3, r2
 8003988:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800398a:	4b33      	ldr	r3, [pc, #204]	; (8003a58 <HAL_RCC_OscConfig+0x4dc>)
 800398c:	2201      	movs	r2, #1
 800398e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003990:	f7fe ff56 	bl	8002840 <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003998:	f7fe ff52 	bl	8002840 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e04d      	b.n	8003a46 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039aa:	4b2a      	ldr	r3, [pc, #168]	; (8003a54 <HAL_RCC_OscConfig+0x4d8>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d0f0      	beq.n	8003998 <HAL_RCC_OscConfig+0x41c>
 80039b6:	e045      	b.n	8003a44 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b8:	4b27      	ldr	r3, [pc, #156]	; (8003a58 <HAL_RCC_OscConfig+0x4dc>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039be:	f7fe ff3f 	bl	8002840 <HAL_GetTick>
 80039c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039c4:	e008      	b.n	80039d8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039c6:	f7fe ff3b 	bl	8002840 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e036      	b.n	8003a46 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039d8:	4b1e      	ldr	r3, [pc, #120]	; (8003a54 <HAL_RCC_OscConfig+0x4d8>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1f0      	bne.n	80039c6 <HAL_RCC_OscConfig+0x44a>
 80039e4:	e02e      	b.n	8003a44 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d101      	bne.n	80039f2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e029      	b.n	8003a46 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039f2:	4b18      	ldr	r3, [pc, #96]	; (8003a54 <HAL_RCC_OscConfig+0x4d8>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d11c      	bne.n	8003a40 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d115      	bne.n	8003a40 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d10d      	bne.n	8003a40 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d106      	bne.n	8003a40 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d001      	beq.n	8003a44 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e000      	b.n	8003a46 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3718      	adds	r7, #24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	40007000 	.word	0x40007000
 8003a54:	40023800 	.word	0x40023800
 8003a58:	42470060 	.word	0x42470060

08003a5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d101      	bne.n	8003a70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e0cc      	b.n	8003c0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a70:	4b68      	ldr	r3, [pc, #416]	; (8003c14 <HAL_RCC_ClockConfig+0x1b8>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 030f 	and.w	r3, r3, #15
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d90c      	bls.n	8003a98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a7e:	4b65      	ldr	r3, [pc, #404]	; (8003c14 <HAL_RCC_ClockConfig+0x1b8>)
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	b2d2      	uxtb	r2, r2
 8003a84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a86:	4b63      	ldr	r3, [pc, #396]	; (8003c14 <HAL_RCC_ClockConfig+0x1b8>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 030f 	and.w	r3, r3, #15
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d001      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e0b8      	b.n	8003c0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d020      	beq.n	8003ae6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0304 	and.w	r3, r3, #4
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d005      	beq.n	8003abc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ab0:	4b59      	ldr	r3, [pc, #356]	; (8003c18 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	4a58      	ldr	r2, [pc, #352]	; (8003c18 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003aba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0308 	and.w	r3, r3, #8
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d005      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ac8:	4b53      	ldr	r3, [pc, #332]	; (8003c18 <HAL_RCC_ClockConfig+0x1bc>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	4a52      	ldr	r2, [pc, #328]	; (8003c18 <HAL_RCC_ClockConfig+0x1bc>)
 8003ace:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ad2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ad4:	4b50      	ldr	r3, [pc, #320]	; (8003c18 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	494d      	ldr	r1, [pc, #308]	; (8003c18 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d044      	beq.n	8003b7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d107      	bne.n	8003b0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003afa:	4b47      	ldr	r3, [pc, #284]	; (8003c18 <HAL_RCC_ClockConfig+0x1bc>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d119      	bne.n	8003b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e07f      	b.n	8003c0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d003      	beq.n	8003b1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b16:	2b03      	cmp	r3, #3
 8003b18:	d107      	bne.n	8003b2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b1a:	4b3f      	ldr	r3, [pc, #252]	; (8003c18 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d109      	bne.n	8003b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e06f      	b.n	8003c0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b2a:	4b3b      	ldr	r3, [pc, #236]	; (8003c18 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e067      	b.n	8003c0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b3a:	4b37      	ldr	r3, [pc, #220]	; (8003c18 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f023 0203 	bic.w	r2, r3, #3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	4934      	ldr	r1, [pc, #208]	; (8003c18 <HAL_RCC_ClockConfig+0x1bc>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b4c:	f7fe fe78 	bl	8002840 <HAL_GetTick>
 8003b50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b52:	e00a      	b.n	8003b6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b54:	f7fe fe74 	bl	8002840 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e04f      	b.n	8003c0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b6a:	4b2b      	ldr	r3, [pc, #172]	; (8003c18 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f003 020c 	and.w	r2, r3, #12
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d1eb      	bne.n	8003b54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b7c:	4b25      	ldr	r3, [pc, #148]	; (8003c14 <HAL_RCC_ClockConfig+0x1b8>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 030f 	and.w	r3, r3, #15
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d20c      	bcs.n	8003ba4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b8a:	4b22      	ldr	r3, [pc, #136]	; (8003c14 <HAL_RCC_ClockConfig+0x1b8>)
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	b2d2      	uxtb	r2, r2
 8003b90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b92:	4b20      	ldr	r3, [pc, #128]	; (8003c14 <HAL_RCC_ClockConfig+0x1b8>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 030f 	and.w	r3, r3, #15
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d001      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e032      	b.n	8003c0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d008      	beq.n	8003bc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bb0:	4b19      	ldr	r3, [pc, #100]	; (8003c18 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	4916      	ldr	r1, [pc, #88]	; (8003c18 <HAL_RCC_ClockConfig+0x1bc>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d009      	beq.n	8003be2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bce:	4b12      	ldr	r3, [pc, #72]	; (8003c18 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	490e      	ldr	r1, [pc, #56]	; (8003c18 <HAL_RCC_ClockConfig+0x1bc>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003be2:	f000 f821 	bl	8003c28 <HAL_RCC_GetSysClockFreq>
 8003be6:	4601      	mov	r1, r0
 8003be8:	4b0b      	ldr	r3, [pc, #44]	; (8003c18 <HAL_RCC_ClockConfig+0x1bc>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	091b      	lsrs	r3, r3, #4
 8003bee:	f003 030f 	and.w	r3, r3, #15
 8003bf2:	4a0a      	ldr	r2, [pc, #40]	; (8003c1c <HAL_RCC_ClockConfig+0x1c0>)
 8003bf4:	5cd3      	ldrb	r3, [r2, r3]
 8003bf6:	fa21 f303 	lsr.w	r3, r1, r3
 8003bfa:	4a09      	ldr	r2, [pc, #36]	; (8003c20 <HAL_RCC_ClockConfig+0x1c4>)
 8003bfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bfe:	4b09      	ldr	r3, [pc, #36]	; (8003c24 <HAL_RCC_ClockConfig+0x1c8>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fe fdd8 	bl	80027b8 <HAL_InitTick>

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	40023c00 	.word	0x40023c00
 8003c18:	40023800 	.word	0x40023800
 8003c1c:	08005330 	.word	0x08005330
 8003c20:	20000018 	.word	0x20000018
 8003c24:	2000001c 	.word	0x2000001c

08003c28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	607b      	str	r3, [r7, #4]
 8003c32:	2300      	movs	r3, #0
 8003c34:	60fb      	str	r3, [r7, #12]
 8003c36:	2300      	movs	r3, #0
 8003c38:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c3e:	4b63      	ldr	r3, [pc, #396]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 030c 	and.w	r3, r3, #12
 8003c46:	2b04      	cmp	r3, #4
 8003c48:	d007      	beq.n	8003c5a <HAL_RCC_GetSysClockFreq+0x32>
 8003c4a:	2b08      	cmp	r3, #8
 8003c4c:	d008      	beq.n	8003c60 <HAL_RCC_GetSysClockFreq+0x38>
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f040 80b4 	bne.w	8003dbc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c54:	4b5e      	ldr	r3, [pc, #376]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003c56:	60bb      	str	r3, [r7, #8]
       break;
 8003c58:	e0b3      	b.n	8003dc2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c5a:	4b5e      	ldr	r3, [pc, #376]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003c5c:	60bb      	str	r3, [r7, #8]
      break;
 8003c5e:	e0b0      	b.n	8003dc2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c60:	4b5a      	ldr	r3, [pc, #360]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c68:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c6a:	4b58      	ldr	r3, [pc, #352]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d04a      	beq.n	8003d0c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c76:	4b55      	ldr	r3, [pc, #340]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	099b      	lsrs	r3, r3, #6
 8003c7c:	f04f 0400 	mov.w	r4, #0
 8003c80:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c84:	f04f 0200 	mov.w	r2, #0
 8003c88:	ea03 0501 	and.w	r5, r3, r1
 8003c8c:	ea04 0602 	and.w	r6, r4, r2
 8003c90:	4629      	mov	r1, r5
 8003c92:	4632      	mov	r2, r6
 8003c94:	f04f 0300 	mov.w	r3, #0
 8003c98:	f04f 0400 	mov.w	r4, #0
 8003c9c:	0154      	lsls	r4, r2, #5
 8003c9e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ca2:	014b      	lsls	r3, r1, #5
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	4622      	mov	r2, r4
 8003ca8:	1b49      	subs	r1, r1, r5
 8003caa:	eb62 0206 	sbc.w	r2, r2, r6
 8003cae:	f04f 0300 	mov.w	r3, #0
 8003cb2:	f04f 0400 	mov.w	r4, #0
 8003cb6:	0194      	lsls	r4, r2, #6
 8003cb8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003cbc:	018b      	lsls	r3, r1, #6
 8003cbe:	1a5b      	subs	r3, r3, r1
 8003cc0:	eb64 0402 	sbc.w	r4, r4, r2
 8003cc4:	f04f 0100 	mov.w	r1, #0
 8003cc8:	f04f 0200 	mov.w	r2, #0
 8003ccc:	00e2      	lsls	r2, r4, #3
 8003cce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003cd2:	00d9      	lsls	r1, r3, #3
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	4614      	mov	r4, r2
 8003cd8:	195b      	adds	r3, r3, r5
 8003cda:	eb44 0406 	adc.w	r4, r4, r6
 8003cde:	f04f 0100 	mov.w	r1, #0
 8003ce2:	f04f 0200 	mov.w	r2, #0
 8003ce6:	0262      	lsls	r2, r4, #9
 8003ce8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003cec:	0259      	lsls	r1, r3, #9
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4614      	mov	r4, r2
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	4621      	mov	r1, r4
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f04f 0400 	mov.w	r4, #0
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	4623      	mov	r3, r4
 8003d00:	f7fc fa6a 	bl	80001d8 <__aeabi_uldivmod>
 8003d04:	4603      	mov	r3, r0
 8003d06:	460c      	mov	r4, r1
 8003d08:	60fb      	str	r3, [r7, #12]
 8003d0a:	e049      	b.n	8003da0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d0c:	4b2f      	ldr	r3, [pc, #188]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	099b      	lsrs	r3, r3, #6
 8003d12:	f04f 0400 	mov.w	r4, #0
 8003d16:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003d1a:	f04f 0200 	mov.w	r2, #0
 8003d1e:	ea03 0501 	and.w	r5, r3, r1
 8003d22:	ea04 0602 	and.w	r6, r4, r2
 8003d26:	4629      	mov	r1, r5
 8003d28:	4632      	mov	r2, r6
 8003d2a:	f04f 0300 	mov.w	r3, #0
 8003d2e:	f04f 0400 	mov.w	r4, #0
 8003d32:	0154      	lsls	r4, r2, #5
 8003d34:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003d38:	014b      	lsls	r3, r1, #5
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	4622      	mov	r2, r4
 8003d3e:	1b49      	subs	r1, r1, r5
 8003d40:	eb62 0206 	sbc.w	r2, r2, r6
 8003d44:	f04f 0300 	mov.w	r3, #0
 8003d48:	f04f 0400 	mov.w	r4, #0
 8003d4c:	0194      	lsls	r4, r2, #6
 8003d4e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003d52:	018b      	lsls	r3, r1, #6
 8003d54:	1a5b      	subs	r3, r3, r1
 8003d56:	eb64 0402 	sbc.w	r4, r4, r2
 8003d5a:	f04f 0100 	mov.w	r1, #0
 8003d5e:	f04f 0200 	mov.w	r2, #0
 8003d62:	00e2      	lsls	r2, r4, #3
 8003d64:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003d68:	00d9      	lsls	r1, r3, #3
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	4614      	mov	r4, r2
 8003d6e:	195b      	adds	r3, r3, r5
 8003d70:	eb44 0406 	adc.w	r4, r4, r6
 8003d74:	f04f 0100 	mov.w	r1, #0
 8003d78:	f04f 0200 	mov.w	r2, #0
 8003d7c:	02a2      	lsls	r2, r4, #10
 8003d7e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003d82:	0299      	lsls	r1, r3, #10
 8003d84:	460b      	mov	r3, r1
 8003d86:	4614      	mov	r4, r2
 8003d88:	4618      	mov	r0, r3
 8003d8a:	4621      	mov	r1, r4
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f04f 0400 	mov.w	r4, #0
 8003d92:	461a      	mov	r2, r3
 8003d94:	4623      	mov	r3, r4
 8003d96:	f7fc fa1f 	bl	80001d8 <__aeabi_uldivmod>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	460c      	mov	r4, r1
 8003d9e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003da0:	4b0a      	ldr	r3, [pc, #40]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	0c1b      	lsrs	r3, r3, #16
 8003da6:	f003 0303 	and.w	r3, r3, #3
 8003daa:	3301      	adds	r3, #1
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db8:	60bb      	str	r3, [r7, #8]
      break;
 8003dba:	e002      	b.n	8003dc2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dbc:	4b04      	ldr	r3, [pc, #16]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003dbe:	60bb      	str	r3, [r7, #8]
      break;
 8003dc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dc2:	68bb      	ldr	r3, [r7, #8]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	00f42400 	.word	0x00f42400
 8003dd4:	007a1200 	.word	0x007a1200

08003dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ddc:	4b03      	ldr	r3, [pc, #12]	; (8003dec <HAL_RCC_GetHCLKFreq+0x14>)
 8003dde:	681b      	ldr	r3, [r3, #0]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	20000018 	.word	0x20000018

08003df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003df4:	f7ff fff0 	bl	8003dd8 <HAL_RCC_GetHCLKFreq>
 8003df8:	4601      	mov	r1, r0
 8003dfa:	4b05      	ldr	r3, [pc, #20]	; (8003e10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	0a9b      	lsrs	r3, r3, #10
 8003e00:	f003 0307 	and.w	r3, r3, #7
 8003e04:	4a03      	ldr	r2, [pc, #12]	; (8003e14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e06:	5cd3      	ldrb	r3, [r2, r3]
 8003e08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	40023800 	.word	0x40023800
 8003e14:	08005340 	.word	0x08005340

08003e18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e1c:	f7ff ffdc 	bl	8003dd8 <HAL_RCC_GetHCLKFreq>
 8003e20:	4601      	mov	r1, r0
 8003e22:	4b05      	ldr	r3, [pc, #20]	; (8003e38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	0b5b      	lsrs	r3, r3, #13
 8003e28:	f003 0307 	and.w	r3, r3, #7
 8003e2c:	4a03      	ldr	r2, [pc, #12]	; (8003e3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e2e:	5cd3      	ldrb	r3, [r2, r3]
 8003e30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	40023800 	.word	0x40023800
 8003e3c:	08005340 	.word	0x08005340

08003e40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e03f      	b.n	8003ed2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d106      	bne.n	8003e6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7fe faec 	bl	8002444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2224      	movs	r2, #36	; 0x24
 8003e70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 fc2d 	bl	80046e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	691a      	ldr	r2, [r3, #16]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	695a      	ldr	r2, [r3, #20]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ea8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68da      	ldr	r2, [r3, #12]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003eb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
	...

08003edc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b20      	cmp	r3, #32
 8003ef4:	d153      	bne.n	8003f9e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d002      	beq.n	8003f02 <HAL_UART_Transmit_DMA+0x26>
 8003efc:	88fb      	ldrh	r3, [r7, #6]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e04c      	b.n	8003fa0 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <HAL_UART_Transmit_DMA+0x38>
 8003f10:	2302      	movs	r3, #2
 8003f12:	e045      	b.n	8003fa0 <HAL_UART_Transmit_DMA+0xc4>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	88fa      	ldrh	r2, [r7, #6]
 8003f26:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	88fa      	ldrh	r2, [r7, #6]
 8003f2c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2221      	movs	r2, #33	; 0x21
 8003f38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f40:	4a19      	ldr	r2, [pc, #100]	; (8003fa8 <HAL_UART_Transmit_DMA+0xcc>)
 8003f42:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f48:	4a18      	ldr	r2, [pc, #96]	; (8003fac <HAL_UART_Transmit_DMA+0xd0>)
 8003f4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f50:	4a17      	ldr	r2, [pc, #92]	; (8003fb0 <HAL_UART_Transmit_DMA+0xd4>)
 8003f52:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f58:	2200      	movs	r2, #0
 8003f5a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8003f5c:	f107 0308 	add.w	r3, r7, #8
 8003f60:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	6819      	ldr	r1, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	3304      	adds	r3, #4
 8003f70:	461a      	mov	r2, r3
 8003f72:	88fb      	ldrh	r3, [r7, #6]
 8003f74:	f7fe fe52 	bl	8002c1c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f80:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	695a      	ldr	r2, [r3, #20]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f98:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	e000      	b.n	8003fa0 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003f9e:	2302      	movs	r3, #2
  }
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3718      	adds	r7, #24
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	080042f1 	.word	0x080042f1
 8003fac:	08004343 	.word	0x08004343
 8003fb0:	080043e3 	.word	0x080043e3

08003fb4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b20      	cmp	r3, #32
 8003fcc:	d166      	bne.n	800409c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d002      	beq.n	8003fda <HAL_UART_Receive_DMA+0x26>
 8003fd4:	88fb      	ldrh	r3, [r7, #6]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e05f      	b.n	800409e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d101      	bne.n	8003fec <HAL_UART_Receive_DMA+0x38>
 8003fe8:	2302      	movs	r3, #2
 8003fea:	e058      	b.n	800409e <HAL_UART_Receive_DMA+0xea>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	88fa      	ldrh	r2, [r7, #6]
 8003ffe:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2222      	movs	r2, #34	; 0x22
 800400a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004012:	4a25      	ldr	r2, [pc, #148]	; (80040a8 <HAL_UART_Receive_DMA+0xf4>)
 8004014:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800401a:	4a24      	ldr	r2, [pc, #144]	; (80040ac <HAL_UART_Receive_DMA+0xf8>)
 800401c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004022:	4a23      	ldr	r2, [pc, #140]	; (80040b0 <HAL_UART_Receive_DMA+0xfc>)
 8004024:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800402a:	2200      	movs	r2, #0
 800402c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800402e:	f107 0308 	add.w	r3, r7, #8
 8004032:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	3304      	adds	r3, #4
 800403e:	4619      	mov	r1, r3
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	88fb      	ldrh	r3, [r7, #6]
 8004046:	f7fe fde9 	bl	8002c1c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800404a:	2300      	movs	r3, #0
 800404c:	613b      	str	r3, [r7, #16]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	613b      	str	r3, [r7, #16]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	613b      	str	r3, [r7, #16]
 800405e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68da      	ldr	r2, [r3, #12]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004076:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695a      	ldr	r2, [r3, #20]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f042 0201 	orr.w	r2, r2, #1
 8004086:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	695a      	ldr	r2, [r3, #20]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004096:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004098:	2300      	movs	r3, #0
 800409a:	e000      	b.n	800409e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800409c:	2302      	movs	r3, #2
  }
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3718      	adds	r7, #24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	0800435f 	.word	0x0800435f
 80040ac:	080043c7 	.word	0x080043c7
 80040b0:	080043e3 	.word	0x080043e3

080040b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b088      	sub	sp, #32
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80040d8:	2300      	movs	r3, #0
 80040da:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	f003 030f 	and.w	r3, r3, #15
 80040e2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10d      	bne.n	8004106 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	f003 0320 	and.w	r3, r3, #32
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d008      	beq.n	8004106 <HAL_UART_IRQHandler+0x52>
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	f003 0320 	and.w	r3, r3, #32
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d003      	beq.n	8004106 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 fa6f 	bl	80045e2 <UART_Receive_IT>
      return;
 8004104:	e0d1      	b.n	80042aa <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 80b0 	beq.w	800426e <HAL_UART_IRQHandler+0x1ba>
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b00      	cmp	r3, #0
 8004116:	d105      	bne.n	8004124 <HAL_UART_IRQHandler+0x70>
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 80a5 	beq.w	800426e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <HAL_UART_IRQHandler+0x90>
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004134:	2b00      	cmp	r3, #0
 8004136:	d005      	beq.n	8004144 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800413c:	f043 0201 	orr.w	r2, r3, #1
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	f003 0304 	and.w	r3, r3, #4
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00a      	beq.n	8004164 <HAL_UART_IRQHandler+0xb0>
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b00      	cmp	r3, #0
 8004156:	d005      	beq.n	8004164 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415c:	f043 0202 	orr.w	r2, r3, #2
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00a      	beq.n	8004184 <HAL_UART_IRQHandler+0xd0>
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f003 0301 	and.w	r3, r3, #1
 8004174:	2b00      	cmp	r3, #0
 8004176:	d005      	beq.n	8004184 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800417c:	f043 0204 	orr.w	r2, r3, #4
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	f003 0308 	and.w	r3, r3, #8
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00f      	beq.n	80041ae <HAL_UART_IRQHandler+0xfa>
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	f003 0320 	and.w	r3, r3, #32
 8004194:	2b00      	cmp	r3, #0
 8004196:	d104      	bne.n	80041a2 <HAL_UART_IRQHandler+0xee>
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d005      	beq.n	80041ae <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a6:	f043 0208 	orr.w	r2, r3, #8
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d078      	beq.n	80042a8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	f003 0320 	and.w	r3, r3, #32
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d007      	beq.n	80041d0 <HAL_UART_IRQHandler+0x11c>
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	f003 0320 	and.w	r3, r3, #32
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d002      	beq.n	80041d0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 fa09 	bl	80045e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041da:	2b40      	cmp	r3, #64	; 0x40
 80041dc:	bf0c      	ite	eq
 80041de:	2301      	moveq	r3, #1
 80041e0:	2300      	movne	r3, #0
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ea:	f003 0308 	and.w	r3, r3, #8
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d102      	bne.n	80041f8 <HAL_UART_IRQHandler+0x144>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d031      	beq.n	800425c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f952 	bl	80044a2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004208:	2b40      	cmp	r3, #64	; 0x40
 800420a:	d123      	bne.n	8004254 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	695a      	ldr	r2, [r3, #20]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800421a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004220:	2b00      	cmp	r3, #0
 8004222:	d013      	beq.n	800424c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004228:	4a21      	ldr	r2, [pc, #132]	; (80042b0 <HAL_UART_IRQHandler+0x1fc>)
 800422a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004230:	4618      	mov	r0, r3
 8004232:	f7fe fd4b 	bl	8002ccc <HAL_DMA_Abort_IT>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d016      	beq.n	800426a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004246:	4610      	mov	r0, r2
 8004248:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800424a:	e00e      	b.n	800426a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 f845 	bl	80042dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004252:	e00a      	b.n	800426a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 f841 	bl	80042dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800425a:	e006      	b.n	800426a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 f83d 	bl	80042dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004268:	e01e      	b.n	80042a8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800426a:	bf00      	nop
    return;
 800426c:	e01c      	b.n	80042a8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004274:	2b00      	cmp	r3, #0
 8004276:	d008      	beq.n	800428a <HAL_UART_IRQHandler+0x1d6>
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f93f 	bl	8004506 <UART_Transmit_IT>
    return;
 8004288:	e00f      	b.n	80042aa <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00a      	beq.n	80042aa <HAL_UART_IRQHandler+0x1f6>
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800429a:	2b00      	cmp	r3, #0
 800429c:	d005      	beq.n	80042aa <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f987 	bl	80045b2 <UART_EndTransmit_IT>
    return;
 80042a4:	bf00      	nop
 80042a6:	e000      	b.n	80042aa <HAL_UART_IRQHandler+0x1f6>
    return;
 80042a8:	bf00      	nop
  }
}
 80042aa:	3720      	adds	r7, #32
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	080044df 	.word	0x080044df

080042b4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fc:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004308:	2b00      	cmp	r3, #0
 800430a:	d113      	bne.n	8004334 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	695a      	ldr	r2, [r3, #20]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004320:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68da      	ldr	r2, [r3, #12]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004330:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004332:	e002      	b.n	800433a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f7fd f9d1 	bl	80016dc <HAL_UART_TxCpltCallback>
}
 800433a:	bf00      	nop
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b084      	sub	sp, #16
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f7ff ffaf 	bl	80042b4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004356:	bf00      	nop
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b084      	sub	sp, #16
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004376:	2b00      	cmp	r3, #0
 8004378:	d11e      	bne.n	80043b8 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68da      	ldr	r2, [r3, #12]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800438e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	695a      	ldr	r2, [r3, #20]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f022 0201 	bic.w	r2, r2, #1
 800439e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695a      	ldr	r2, [r3, #20]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043ae:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	f7fd f9a1 	bl	8001700 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043be:	bf00      	nop
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b084      	sub	sp, #16
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f7ff ff77 	bl	80042c8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043da:	bf00      	nop
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b084      	sub	sp, #16
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80043ea:	2300      	movs	r3, #0
 80043ec:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043fe:	2b80      	cmp	r3, #128	; 0x80
 8004400:	bf0c      	ite	eq
 8004402:	2301      	moveq	r3, #1
 8004404:	2300      	movne	r3, #0
 8004406:	b2db      	uxtb	r3, r3
 8004408:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b21      	cmp	r3, #33	; 0x21
 8004414:	d108      	bne.n	8004428 <UART_DMAError+0x46>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d005      	beq.n	8004428 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	2200      	movs	r2, #0
 8004420:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004422:	68b8      	ldr	r0, [r7, #8]
 8004424:	f000 f827 	bl	8004476 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004432:	2b40      	cmp	r3, #64	; 0x40
 8004434:	bf0c      	ite	eq
 8004436:	2301      	moveq	r3, #1
 8004438:	2300      	movne	r3, #0
 800443a:	b2db      	uxtb	r3, r3
 800443c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b22      	cmp	r3, #34	; 0x22
 8004448:	d108      	bne.n	800445c <UART_DMAError+0x7a>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d005      	beq.n	800445c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	2200      	movs	r2, #0
 8004454:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004456:	68b8      	ldr	r0, [r7, #8]
 8004458:	f000 f823 	bl	80044a2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004460:	f043 0210 	orr.w	r2, r3, #16
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004468:	68b8      	ldr	r0, [r7, #8]
 800446a:	f7ff ff37 	bl	80042dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800446e:	bf00      	nop
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004476:	b480      	push	{r7}
 8004478:	b083      	sub	sp, #12
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68da      	ldr	r2, [r3, #12]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800448c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2220      	movs	r2, #32
 8004492:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8004496:	bf00      	nop
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr

080044a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68da      	ldr	r2, [r3, #12]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80044b8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	695a      	ldr	r2, [r3, #20]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 0201 	bic.w	r2, r2, #1
 80044c8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2220      	movs	r2, #32
 80044ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b084      	sub	sp, #16
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f7ff feef 	bl	80042dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044fe:	bf00      	nop
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004506:	b480      	push	{r7}
 8004508:	b085      	sub	sp, #20
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b21      	cmp	r3, #33	; 0x21
 8004518:	d144      	bne.n	80045a4 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004522:	d11a      	bne.n	800455a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	881b      	ldrh	r3, [r3, #0]
 800452e:	461a      	mov	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004538:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d105      	bne.n	800454e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	1c9a      	adds	r2, r3, #2
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	621a      	str	r2, [r3, #32]
 800454c:	e00e      	b.n	800456c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	1c5a      	adds	r2, r3, #1
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	621a      	str	r2, [r3, #32]
 8004558:	e008      	b.n	800456c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	1c59      	adds	r1, r3, #1
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6211      	str	r1, [r2, #32]
 8004564:	781a      	ldrb	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004570:	b29b      	uxth	r3, r3
 8004572:	3b01      	subs	r3, #1
 8004574:	b29b      	uxth	r3, r3
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	4619      	mov	r1, r3
 800457a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800457c:	2b00      	cmp	r3, #0
 800457e:	d10f      	bne.n	80045a0 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68da      	ldr	r2, [r3, #12]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800458e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68da      	ldr	r2, [r3, #12]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800459e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045a0:	2300      	movs	r3, #0
 80045a2:	e000      	b.n	80045a6 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80045a4:	2302      	movs	r3, #2
  }
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3714      	adds	r7, #20
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b082      	sub	sp, #8
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68da      	ldr	r2, [r3, #12]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2220      	movs	r2, #32
 80045ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f7fd f882 	bl	80016dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b084      	sub	sp, #16
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b22      	cmp	r3, #34	; 0x22
 80045f4:	d171      	bne.n	80046da <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045fe:	d123      	bne.n	8004648 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004604:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10e      	bne.n	800462c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	b29b      	uxth	r3, r3
 8004616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800461a:	b29a      	uxth	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004624:	1c9a      	adds	r2, r3, #2
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	629a      	str	r2, [r3, #40]	; 0x28
 800462a:	e029      	b.n	8004680 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	b29b      	uxth	r3, r3
 8004634:	b2db      	uxtb	r3, r3
 8004636:	b29a      	uxth	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004640:	1c5a      	adds	r2, r3, #1
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	629a      	str	r2, [r3, #40]	; 0x28
 8004646:	e01b      	b.n	8004680 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10a      	bne.n	8004666 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6858      	ldr	r0, [r3, #4]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465a:	1c59      	adds	r1, r3, #1
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	6291      	str	r1, [r2, #40]	; 0x28
 8004660:	b2c2      	uxtb	r2, r0
 8004662:	701a      	strb	r2, [r3, #0]
 8004664:	e00c      	b.n	8004680 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	b2da      	uxtb	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004672:	1c58      	adds	r0, r3, #1
 8004674:	6879      	ldr	r1, [r7, #4]
 8004676:	6288      	str	r0, [r1, #40]	; 0x28
 8004678:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800467c:	b2d2      	uxtb	r2, r2
 800467e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004684:	b29b      	uxth	r3, r3
 8004686:	3b01      	subs	r3, #1
 8004688:	b29b      	uxth	r3, r3
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	4619      	mov	r1, r3
 800468e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004690:	2b00      	cmp	r3, #0
 8004692:	d120      	bne.n	80046d6 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68da      	ldr	r2, [r3, #12]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f022 0220 	bic.w	r2, r2, #32
 80046a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68da      	ldr	r2, [r3, #12]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	695a      	ldr	r2, [r3, #20]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0201 	bic.w	r2, r2, #1
 80046c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2220      	movs	r2, #32
 80046c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f7fd f817 	bl	8001700 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80046d2:	2300      	movs	r3, #0
 80046d4:	e002      	b.n	80046dc <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80046d6:	2300      	movs	r3, #0
 80046d8:	e000      	b.n	80046dc <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80046da:	2302      	movs	r3, #2
  }
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046e8:	b085      	sub	sp, #20
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68da      	ldr	r2, [r3, #12]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	431a      	orrs	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	431a      	orrs	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	69db      	ldr	r3, [r3, #28]
 8004718:	4313      	orrs	r3, r2
 800471a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004726:	f023 030c 	bic.w	r3, r3, #12
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6812      	ldr	r2, [r2, #0]
 800472e:	68f9      	ldr	r1, [r7, #12]
 8004730:	430b      	orrs	r3, r1
 8004732:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	699a      	ldr	r2, [r3, #24]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	430a      	orrs	r2, r1
 8004748:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	69db      	ldr	r3, [r3, #28]
 800474e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004752:	f040 818b 	bne.w	8004a6c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4ac1      	ldr	r2, [pc, #772]	; (8004a60 <UART_SetConfig+0x37c>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d005      	beq.n	800476c <UART_SetConfig+0x88>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4abf      	ldr	r2, [pc, #764]	; (8004a64 <UART_SetConfig+0x380>)
 8004766:	4293      	cmp	r3, r2
 8004768:	f040 80bd 	bne.w	80048e6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800476c:	f7ff fb54 	bl	8003e18 <HAL_RCC_GetPCLK2Freq>
 8004770:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	461d      	mov	r5, r3
 8004776:	f04f 0600 	mov.w	r6, #0
 800477a:	46a8      	mov	r8, r5
 800477c:	46b1      	mov	r9, r6
 800477e:	eb18 0308 	adds.w	r3, r8, r8
 8004782:	eb49 0409 	adc.w	r4, r9, r9
 8004786:	4698      	mov	r8, r3
 8004788:	46a1      	mov	r9, r4
 800478a:	eb18 0805 	adds.w	r8, r8, r5
 800478e:	eb49 0906 	adc.w	r9, r9, r6
 8004792:	f04f 0100 	mov.w	r1, #0
 8004796:	f04f 0200 	mov.w	r2, #0
 800479a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800479e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80047a2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80047a6:	4688      	mov	r8, r1
 80047a8:	4691      	mov	r9, r2
 80047aa:	eb18 0005 	adds.w	r0, r8, r5
 80047ae:	eb49 0106 	adc.w	r1, r9, r6
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	461d      	mov	r5, r3
 80047b8:	f04f 0600 	mov.w	r6, #0
 80047bc:	196b      	adds	r3, r5, r5
 80047be:	eb46 0406 	adc.w	r4, r6, r6
 80047c2:	461a      	mov	r2, r3
 80047c4:	4623      	mov	r3, r4
 80047c6:	f7fb fd07 	bl	80001d8 <__aeabi_uldivmod>
 80047ca:	4603      	mov	r3, r0
 80047cc:	460c      	mov	r4, r1
 80047ce:	461a      	mov	r2, r3
 80047d0:	4ba5      	ldr	r3, [pc, #660]	; (8004a68 <UART_SetConfig+0x384>)
 80047d2:	fba3 2302 	umull	r2, r3, r3, r2
 80047d6:	095b      	lsrs	r3, r3, #5
 80047d8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	461d      	mov	r5, r3
 80047e0:	f04f 0600 	mov.w	r6, #0
 80047e4:	46a9      	mov	r9, r5
 80047e6:	46b2      	mov	sl, r6
 80047e8:	eb19 0309 	adds.w	r3, r9, r9
 80047ec:	eb4a 040a 	adc.w	r4, sl, sl
 80047f0:	4699      	mov	r9, r3
 80047f2:	46a2      	mov	sl, r4
 80047f4:	eb19 0905 	adds.w	r9, r9, r5
 80047f8:	eb4a 0a06 	adc.w	sl, sl, r6
 80047fc:	f04f 0100 	mov.w	r1, #0
 8004800:	f04f 0200 	mov.w	r2, #0
 8004804:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004808:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800480c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004810:	4689      	mov	r9, r1
 8004812:	4692      	mov	sl, r2
 8004814:	eb19 0005 	adds.w	r0, r9, r5
 8004818:	eb4a 0106 	adc.w	r1, sl, r6
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	461d      	mov	r5, r3
 8004822:	f04f 0600 	mov.w	r6, #0
 8004826:	196b      	adds	r3, r5, r5
 8004828:	eb46 0406 	adc.w	r4, r6, r6
 800482c:	461a      	mov	r2, r3
 800482e:	4623      	mov	r3, r4
 8004830:	f7fb fcd2 	bl	80001d8 <__aeabi_uldivmod>
 8004834:	4603      	mov	r3, r0
 8004836:	460c      	mov	r4, r1
 8004838:	461a      	mov	r2, r3
 800483a:	4b8b      	ldr	r3, [pc, #556]	; (8004a68 <UART_SetConfig+0x384>)
 800483c:	fba3 1302 	umull	r1, r3, r3, r2
 8004840:	095b      	lsrs	r3, r3, #5
 8004842:	2164      	movs	r1, #100	; 0x64
 8004844:	fb01 f303 	mul.w	r3, r1, r3
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	3332      	adds	r3, #50	; 0x32
 800484e:	4a86      	ldr	r2, [pc, #536]	; (8004a68 <UART_SetConfig+0x384>)
 8004850:	fba2 2303 	umull	r2, r3, r2, r3
 8004854:	095b      	lsrs	r3, r3, #5
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800485c:	4498      	add	r8, r3
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	461d      	mov	r5, r3
 8004862:	f04f 0600 	mov.w	r6, #0
 8004866:	46a9      	mov	r9, r5
 8004868:	46b2      	mov	sl, r6
 800486a:	eb19 0309 	adds.w	r3, r9, r9
 800486e:	eb4a 040a 	adc.w	r4, sl, sl
 8004872:	4699      	mov	r9, r3
 8004874:	46a2      	mov	sl, r4
 8004876:	eb19 0905 	adds.w	r9, r9, r5
 800487a:	eb4a 0a06 	adc.w	sl, sl, r6
 800487e:	f04f 0100 	mov.w	r1, #0
 8004882:	f04f 0200 	mov.w	r2, #0
 8004886:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800488a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800488e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004892:	4689      	mov	r9, r1
 8004894:	4692      	mov	sl, r2
 8004896:	eb19 0005 	adds.w	r0, r9, r5
 800489a:	eb4a 0106 	adc.w	r1, sl, r6
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	461d      	mov	r5, r3
 80048a4:	f04f 0600 	mov.w	r6, #0
 80048a8:	196b      	adds	r3, r5, r5
 80048aa:	eb46 0406 	adc.w	r4, r6, r6
 80048ae:	461a      	mov	r2, r3
 80048b0:	4623      	mov	r3, r4
 80048b2:	f7fb fc91 	bl	80001d8 <__aeabi_uldivmod>
 80048b6:	4603      	mov	r3, r0
 80048b8:	460c      	mov	r4, r1
 80048ba:	461a      	mov	r2, r3
 80048bc:	4b6a      	ldr	r3, [pc, #424]	; (8004a68 <UART_SetConfig+0x384>)
 80048be:	fba3 1302 	umull	r1, r3, r3, r2
 80048c2:	095b      	lsrs	r3, r3, #5
 80048c4:	2164      	movs	r1, #100	; 0x64
 80048c6:	fb01 f303 	mul.w	r3, r1, r3
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	00db      	lsls	r3, r3, #3
 80048ce:	3332      	adds	r3, #50	; 0x32
 80048d0:	4a65      	ldr	r2, [pc, #404]	; (8004a68 <UART_SetConfig+0x384>)
 80048d2:	fba2 2303 	umull	r2, r3, r2, r3
 80048d6:	095b      	lsrs	r3, r3, #5
 80048d8:	f003 0207 	and.w	r2, r3, #7
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4442      	add	r2, r8
 80048e2:	609a      	str	r2, [r3, #8]
 80048e4:	e26f      	b.n	8004dc6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048e6:	f7ff fa83 	bl	8003df0 <HAL_RCC_GetPCLK1Freq>
 80048ea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	461d      	mov	r5, r3
 80048f0:	f04f 0600 	mov.w	r6, #0
 80048f4:	46a8      	mov	r8, r5
 80048f6:	46b1      	mov	r9, r6
 80048f8:	eb18 0308 	adds.w	r3, r8, r8
 80048fc:	eb49 0409 	adc.w	r4, r9, r9
 8004900:	4698      	mov	r8, r3
 8004902:	46a1      	mov	r9, r4
 8004904:	eb18 0805 	adds.w	r8, r8, r5
 8004908:	eb49 0906 	adc.w	r9, r9, r6
 800490c:	f04f 0100 	mov.w	r1, #0
 8004910:	f04f 0200 	mov.w	r2, #0
 8004914:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004918:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800491c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004920:	4688      	mov	r8, r1
 8004922:	4691      	mov	r9, r2
 8004924:	eb18 0005 	adds.w	r0, r8, r5
 8004928:	eb49 0106 	adc.w	r1, r9, r6
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	461d      	mov	r5, r3
 8004932:	f04f 0600 	mov.w	r6, #0
 8004936:	196b      	adds	r3, r5, r5
 8004938:	eb46 0406 	adc.w	r4, r6, r6
 800493c:	461a      	mov	r2, r3
 800493e:	4623      	mov	r3, r4
 8004940:	f7fb fc4a 	bl	80001d8 <__aeabi_uldivmod>
 8004944:	4603      	mov	r3, r0
 8004946:	460c      	mov	r4, r1
 8004948:	461a      	mov	r2, r3
 800494a:	4b47      	ldr	r3, [pc, #284]	; (8004a68 <UART_SetConfig+0x384>)
 800494c:	fba3 2302 	umull	r2, r3, r3, r2
 8004950:	095b      	lsrs	r3, r3, #5
 8004952:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	461d      	mov	r5, r3
 800495a:	f04f 0600 	mov.w	r6, #0
 800495e:	46a9      	mov	r9, r5
 8004960:	46b2      	mov	sl, r6
 8004962:	eb19 0309 	adds.w	r3, r9, r9
 8004966:	eb4a 040a 	adc.w	r4, sl, sl
 800496a:	4699      	mov	r9, r3
 800496c:	46a2      	mov	sl, r4
 800496e:	eb19 0905 	adds.w	r9, r9, r5
 8004972:	eb4a 0a06 	adc.w	sl, sl, r6
 8004976:	f04f 0100 	mov.w	r1, #0
 800497a:	f04f 0200 	mov.w	r2, #0
 800497e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004982:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004986:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800498a:	4689      	mov	r9, r1
 800498c:	4692      	mov	sl, r2
 800498e:	eb19 0005 	adds.w	r0, r9, r5
 8004992:	eb4a 0106 	adc.w	r1, sl, r6
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	461d      	mov	r5, r3
 800499c:	f04f 0600 	mov.w	r6, #0
 80049a0:	196b      	adds	r3, r5, r5
 80049a2:	eb46 0406 	adc.w	r4, r6, r6
 80049a6:	461a      	mov	r2, r3
 80049a8:	4623      	mov	r3, r4
 80049aa:	f7fb fc15 	bl	80001d8 <__aeabi_uldivmod>
 80049ae:	4603      	mov	r3, r0
 80049b0:	460c      	mov	r4, r1
 80049b2:	461a      	mov	r2, r3
 80049b4:	4b2c      	ldr	r3, [pc, #176]	; (8004a68 <UART_SetConfig+0x384>)
 80049b6:	fba3 1302 	umull	r1, r3, r3, r2
 80049ba:	095b      	lsrs	r3, r3, #5
 80049bc:	2164      	movs	r1, #100	; 0x64
 80049be:	fb01 f303 	mul.w	r3, r1, r3
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	3332      	adds	r3, #50	; 0x32
 80049c8:	4a27      	ldr	r2, [pc, #156]	; (8004a68 <UART_SetConfig+0x384>)
 80049ca:	fba2 2303 	umull	r2, r3, r2, r3
 80049ce:	095b      	lsrs	r3, r3, #5
 80049d0:	005b      	lsls	r3, r3, #1
 80049d2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049d6:	4498      	add	r8, r3
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	461d      	mov	r5, r3
 80049dc:	f04f 0600 	mov.w	r6, #0
 80049e0:	46a9      	mov	r9, r5
 80049e2:	46b2      	mov	sl, r6
 80049e4:	eb19 0309 	adds.w	r3, r9, r9
 80049e8:	eb4a 040a 	adc.w	r4, sl, sl
 80049ec:	4699      	mov	r9, r3
 80049ee:	46a2      	mov	sl, r4
 80049f0:	eb19 0905 	adds.w	r9, r9, r5
 80049f4:	eb4a 0a06 	adc.w	sl, sl, r6
 80049f8:	f04f 0100 	mov.w	r1, #0
 80049fc:	f04f 0200 	mov.w	r2, #0
 8004a00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a0c:	4689      	mov	r9, r1
 8004a0e:	4692      	mov	sl, r2
 8004a10:	eb19 0005 	adds.w	r0, r9, r5
 8004a14:	eb4a 0106 	adc.w	r1, sl, r6
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	461d      	mov	r5, r3
 8004a1e:	f04f 0600 	mov.w	r6, #0
 8004a22:	196b      	adds	r3, r5, r5
 8004a24:	eb46 0406 	adc.w	r4, r6, r6
 8004a28:	461a      	mov	r2, r3
 8004a2a:	4623      	mov	r3, r4
 8004a2c:	f7fb fbd4 	bl	80001d8 <__aeabi_uldivmod>
 8004a30:	4603      	mov	r3, r0
 8004a32:	460c      	mov	r4, r1
 8004a34:	461a      	mov	r2, r3
 8004a36:	4b0c      	ldr	r3, [pc, #48]	; (8004a68 <UART_SetConfig+0x384>)
 8004a38:	fba3 1302 	umull	r1, r3, r3, r2
 8004a3c:	095b      	lsrs	r3, r3, #5
 8004a3e:	2164      	movs	r1, #100	; 0x64
 8004a40:	fb01 f303 	mul.w	r3, r1, r3
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	3332      	adds	r3, #50	; 0x32
 8004a4a:	4a07      	ldr	r2, [pc, #28]	; (8004a68 <UART_SetConfig+0x384>)
 8004a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a50:	095b      	lsrs	r3, r3, #5
 8004a52:	f003 0207 	and.w	r2, r3, #7
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4442      	add	r2, r8
 8004a5c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004a5e:	e1b2      	b.n	8004dc6 <UART_SetConfig+0x6e2>
 8004a60:	40011000 	.word	0x40011000
 8004a64:	40011400 	.word	0x40011400
 8004a68:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4ad7      	ldr	r2, [pc, #860]	; (8004dd0 <UART_SetConfig+0x6ec>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d005      	beq.n	8004a82 <UART_SetConfig+0x39e>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4ad6      	ldr	r2, [pc, #856]	; (8004dd4 <UART_SetConfig+0x6f0>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	f040 80d1 	bne.w	8004c24 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a82:	f7ff f9c9 	bl	8003e18 <HAL_RCC_GetPCLK2Freq>
 8004a86:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	469a      	mov	sl, r3
 8004a8c:	f04f 0b00 	mov.w	fp, #0
 8004a90:	46d0      	mov	r8, sl
 8004a92:	46d9      	mov	r9, fp
 8004a94:	eb18 0308 	adds.w	r3, r8, r8
 8004a98:	eb49 0409 	adc.w	r4, r9, r9
 8004a9c:	4698      	mov	r8, r3
 8004a9e:	46a1      	mov	r9, r4
 8004aa0:	eb18 080a 	adds.w	r8, r8, sl
 8004aa4:	eb49 090b 	adc.w	r9, r9, fp
 8004aa8:	f04f 0100 	mov.w	r1, #0
 8004aac:	f04f 0200 	mov.w	r2, #0
 8004ab0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004ab4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004ab8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004abc:	4688      	mov	r8, r1
 8004abe:	4691      	mov	r9, r2
 8004ac0:	eb1a 0508 	adds.w	r5, sl, r8
 8004ac4:	eb4b 0609 	adc.w	r6, fp, r9
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	4619      	mov	r1, r3
 8004ace:	f04f 0200 	mov.w	r2, #0
 8004ad2:	f04f 0300 	mov.w	r3, #0
 8004ad6:	f04f 0400 	mov.w	r4, #0
 8004ada:	0094      	lsls	r4, r2, #2
 8004adc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ae0:	008b      	lsls	r3, r1, #2
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	4623      	mov	r3, r4
 8004ae6:	4628      	mov	r0, r5
 8004ae8:	4631      	mov	r1, r6
 8004aea:	f7fb fb75 	bl	80001d8 <__aeabi_uldivmod>
 8004aee:	4603      	mov	r3, r0
 8004af0:	460c      	mov	r4, r1
 8004af2:	461a      	mov	r2, r3
 8004af4:	4bb8      	ldr	r3, [pc, #736]	; (8004dd8 <UART_SetConfig+0x6f4>)
 8004af6:	fba3 2302 	umull	r2, r3, r3, r2
 8004afa:	095b      	lsrs	r3, r3, #5
 8004afc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	469b      	mov	fp, r3
 8004b04:	f04f 0c00 	mov.w	ip, #0
 8004b08:	46d9      	mov	r9, fp
 8004b0a:	46e2      	mov	sl, ip
 8004b0c:	eb19 0309 	adds.w	r3, r9, r9
 8004b10:	eb4a 040a 	adc.w	r4, sl, sl
 8004b14:	4699      	mov	r9, r3
 8004b16:	46a2      	mov	sl, r4
 8004b18:	eb19 090b 	adds.w	r9, r9, fp
 8004b1c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004b20:	f04f 0100 	mov.w	r1, #0
 8004b24:	f04f 0200 	mov.w	r2, #0
 8004b28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b2c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b30:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b34:	4689      	mov	r9, r1
 8004b36:	4692      	mov	sl, r2
 8004b38:	eb1b 0509 	adds.w	r5, fp, r9
 8004b3c:	eb4c 060a 	adc.w	r6, ip, sl
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	4619      	mov	r1, r3
 8004b46:	f04f 0200 	mov.w	r2, #0
 8004b4a:	f04f 0300 	mov.w	r3, #0
 8004b4e:	f04f 0400 	mov.w	r4, #0
 8004b52:	0094      	lsls	r4, r2, #2
 8004b54:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b58:	008b      	lsls	r3, r1, #2
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	4623      	mov	r3, r4
 8004b5e:	4628      	mov	r0, r5
 8004b60:	4631      	mov	r1, r6
 8004b62:	f7fb fb39 	bl	80001d8 <__aeabi_uldivmod>
 8004b66:	4603      	mov	r3, r0
 8004b68:	460c      	mov	r4, r1
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	4b9a      	ldr	r3, [pc, #616]	; (8004dd8 <UART_SetConfig+0x6f4>)
 8004b6e:	fba3 1302 	umull	r1, r3, r3, r2
 8004b72:	095b      	lsrs	r3, r3, #5
 8004b74:	2164      	movs	r1, #100	; 0x64
 8004b76:	fb01 f303 	mul.w	r3, r1, r3
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	011b      	lsls	r3, r3, #4
 8004b7e:	3332      	adds	r3, #50	; 0x32
 8004b80:	4a95      	ldr	r2, [pc, #596]	; (8004dd8 <UART_SetConfig+0x6f4>)
 8004b82:	fba2 2303 	umull	r2, r3, r2, r3
 8004b86:	095b      	lsrs	r3, r3, #5
 8004b88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b8c:	4498      	add	r8, r3
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	469b      	mov	fp, r3
 8004b92:	f04f 0c00 	mov.w	ip, #0
 8004b96:	46d9      	mov	r9, fp
 8004b98:	46e2      	mov	sl, ip
 8004b9a:	eb19 0309 	adds.w	r3, r9, r9
 8004b9e:	eb4a 040a 	adc.w	r4, sl, sl
 8004ba2:	4699      	mov	r9, r3
 8004ba4:	46a2      	mov	sl, r4
 8004ba6:	eb19 090b 	adds.w	r9, r9, fp
 8004baa:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004bae:	f04f 0100 	mov.w	r1, #0
 8004bb2:	f04f 0200 	mov.w	r2, #0
 8004bb6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004bbe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004bc2:	4689      	mov	r9, r1
 8004bc4:	4692      	mov	sl, r2
 8004bc6:	eb1b 0509 	adds.w	r5, fp, r9
 8004bca:	eb4c 060a 	adc.w	r6, ip, sl
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	f04f 0200 	mov.w	r2, #0
 8004bd8:	f04f 0300 	mov.w	r3, #0
 8004bdc:	f04f 0400 	mov.w	r4, #0
 8004be0:	0094      	lsls	r4, r2, #2
 8004be2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004be6:	008b      	lsls	r3, r1, #2
 8004be8:	461a      	mov	r2, r3
 8004bea:	4623      	mov	r3, r4
 8004bec:	4628      	mov	r0, r5
 8004bee:	4631      	mov	r1, r6
 8004bf0:	f7fb faf2 	bl	80001d8 <__aeabi_uldivmod>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	460c      	mov	r4, r1
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	4b77      	ldr	r3, [pc, #476]	; (8004dd8 <UART_SetConfig+0x6f4>)
 8004bfc:	fba3 1302 	umull	r1, r3, r3, r2
 8004c00:	095b      	lsrs	r3, r3, #5
 8004c02:	2164      	movs	r1, #100	; 0x64
 8004c04:	fb01 f303 	mul.w	r3, r1, r3
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	011b      	lsls	r3, r3, #4
 8004c0c:	3332      	adds	r3, #50	; 0x32
 8004c0e:	4a72      	ldr	r2, [pc, #456]	; (8004dd8 <UART_SetConfig+0x6f4>)
 8004c10:	fba2 2303 	umull	r2, r3, r2, r3
 8004c14:	095b      	lsrs	r3, r3, #5
 8004c16:	f003 020f 	and.w	r2, r3, #15
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4442      	add	r2, r8
 8004c20:	609a      	str	r2, [r3, #8]
 8004c22:	e0d0      	b.n	8004dc6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c24:	f7ff f8e4 	bl	8003df0 <HAL_RCC_GetPCLK1Freq>
 8004c28:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	469a      	mov	sl, r3
 8004c2e:	f04f 0b00 	mov.w	fp, #0
 8004c32:	46d0      	mov	r8, sl
 8004c34:	46d9      	mov	r9, fp
 8004c36:	eb18 0308 	adds.w	r3, r8, r8
 8004c3a:	eb49 0409 	adc.w	r4, r9, r9
 8004c3e:	4698      	mov	r8, r3
 8004c40:	46a1      	mov	r9, r4
 8004c42:	eb18 080a 	adds.w	r8, r8, sl
 8004c46:	eb49 090b 	adc.w	r9, r9, fp
 8004c4a:	f04f 0100 	mov.w	r1, #0
 8004c4e:	f04f 0200 	mov.w	r2, #0
 8004c52:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004c56:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004c5a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004c5e:	4688      	mov	r8, r1
 8004c60:	4691      	mov	r9, r2
 8004c62:	eb1a 0508 	adds.w	r5, sl, r8
 8004c66:	eb4b 0609 	adc.w	r6, fp, r9
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	4619      	mov	r1, r3
 8004c70:	f04f 0200 	mov.w	r2, #0
 8004c74:	f04f 0300 	mov.w	r3, #0
 8004c78:	f04f 0400 	mov.w	r4, #0
 8004c7c:	0094      	lsls	r4, r2, #2
 8004c7e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c82:	008b      	lsls	r3, r1, #2
 8004c84:	461a      	mov	r2, r3
 8004c86:	4623      	mov	r3, r4
 8004c88:	4628      	mov	r0, r5
 8004c8a:	4631      	mov	r1, r6
 8004c8c:	f7fb faa4 	bl	80001d8 <__aeabi_uldivmod>
 8004c90:	4603      	mov	r3, r0
 8004c92:	460c      	mov	r4, r1
 8004c94:	461a      	mov	r2, r3
 8004c96:	4b50      	ldr	r3, [pc, #320]	; (8004dd8 <UART_SetConfig+0x6f4>)
 8004c98:	fba3 2302 	umull	r2, r3, r3, r2
 8004c9c:	095b      	lsrs	r3, r3, #5
 8004c9e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	469b      	mov	fp, r3
 8004ca6:	f04f 0c00 	mov.w	ip, #0
 8004caa:	46d9      	mov	r9, fp
 8004cac:	46e2      	mov	sl, ip
 8004cae:	eb19 0309 	adds.w	r3, r9, r9
 8004cb2:	eb4a 040a 	adc.w	r4, sl, sl
 8004cb6:	4699      	mov	r9, r3
 8004cb8:	46a2      	mov	sl, r4
 8004cba:	eb19 090b 	adds.w	r9, r9, fp
 8004cbe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004cc2:	f04f 0100 	mov.w	r1, #0
 8004cc6:	f04f 0200 	mov.w	r2, #0
 8004cca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004cd2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004cd6:	4689      	mov	r9, r1
 8004cd8:	4692      	mov	sl, r2
 8004cda:	eb1b 0509 	adds.w	r5, fp, r9
 8004cde:	eb4c 060a 	adc.w	r6, ip, sl
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	f04f 0200 	mov.w	r2, #0
 8004cec:	f04f 0300 	mov.w	r3, #0
 8004cf0:	f04f 0400 	mov.w	r4, #0
 8004cf4:	0094      	lsls	r4, r2, #2
 8004cf6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004cfa:	008b      	lsls	r3, r1, #2
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	4623      	mov	r3, r4
 8004d00:	4628      	mov	r0, r5
 8004d02:	4631      	mov	r1, r6
 8004d04:	f7fb fa68 	bl	80001d8 <__aeabi_uldivmod>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	460c      	mov	r4, r1
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	4b32      	ldr	r3, [pc, #200]	; (8004dd8 <UART_SetConfig+0x6f4>)
 8004d10:	fba3 1302 	umull	r1, r3, r3, r2
 8004d14:	095b      	lsrs	r3, r3, #5
 8004d16:	2164      	movs	r1, #100	; 0x64
 8004d18:	fb01 f303 	mul.w	r3, r1, r3
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	011b      	lsls	r3, r3, #4
 8004d20:	3332      	adds	r3, #50	; 0x32
 8004d22:	4a2d      	ldr	r2, [pc, #180]	; (8004dd8 <UART_SetConfig+0x6f4>)
 8004d24:	fba2 2303 	umull	r2, r3, r2, r3
 8004d28:	095b      	lsrs	r3, r3, #5
 8004d2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d2e:	4498      	add	r8, r3
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	469b      	mov	fp, r3
 8004d34:	f04f 0c00 	mov.w	ip, #0
 8004d38:	46d9      	mov	r9, fp
 8004d3a:	46e2      	mov	sl, ip
 8004d3c:	eb19 0309 	adds.w	r3, r9, r9
 8004d40:	eb4a 040a 	adc.w	r4, sl, sl
 8004d44:	4699      	mov	r9, r3
 8004d46:	46a2      	mov	sl, r4
 8004d48:	eb19 090b 	adds.w	r9, r9, fp
 8004d4c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004d50:	f04f 0100 	mov.w	r1, #0
 8004d54:	f04f 0200 	mov.w	r2, #0
 8004d58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d5c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d60:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d64:	4689      	mov	r9, r1
 8004d66:	4692      	mov	sl, r2
 8004d68:	eb1b 0509 	adds.w	r5, fp, r9
 8004d6c:	eb4c 060a 	adc.w	r6, ip, sl
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	4619      	mov	r1, r3
 8004d76:	f04f 0200 	mov.w	r2, #0
 8004d7a:	f04f 0300 	mov.w	r3, #0
 8004d7e:	f04f 0400 	mov.w	r4, #0
 8004d82:	0094      	lsls	r4, r2, #2
 8004d84:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d88:	008b      	lsls	r3, r1, #2
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	4623      	mov	r3, r4
 8004d8e:	4628      	mov	r0, r5
 8004d90:	4631      	mov	r1, r6
 8004d92:	f7fb fa21 	bl	80001d8 <__aeabi_uldivmod>
 8004d96:	4603      	mov	r3, r0
 8004d98:	460c      	mov	r4, r1
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	4b0e      	ldr	r3, [pc, #56]	; (8004dd8 <UART_SetConfig+0x6f4>)
 8004d9e:	fba3 1302 	umull	r1, r3, r3, r2
 8004da2:	095b      	lsrs	r3, r3, #5
 8004da4:	2164      	movs	r1, #100	; 0x64
 8004da6:	fb01 f303 	mul.w	r3, r1, r3
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	011b      	lsls	r3, r3, #4
 8004dae:	3332      	adds	r3, #50	; 0x32
 8004db0:	4a09      	ldr	r2, [pc, #36]	; (8004dd8 <UART_SetConfig+0x6f4>)
 8004db2:	fba2 2303 	umull	r2, r3, r2, r3
 8004db6:	095b      	lsrs	r3, r3, #5
 8004db8:	f003 020f 	and.w	r2, r3, #15
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4442      	add	r2, r8
 8004dc2:	609a      	str	r2, [r3, #8]
}
 8004dc4:	e7ff      	b.n	8004dc6 <UART_SetConfig+0x6e2>
 8004dc6:	bf00      	nop
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dd0:	40011000 	.word	0x40011000
 8004dd4:	40011400 	.word	0x40011400
 8004dd8:	51eb851f 	.word	0x51eb851f

08004ddc <__cxa_pure_virtual>:
 8004ddc:	b508      	push	{r3, lr}
 8004dde:	f000 f80d 	bl	8004dfc <_ZSt9terminatev>

08004de2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8004de2:	b508      	push	{r3, lr}
 8004de4:	4780      	blx	r0
 8004de6:	f000 f80e 	bl	8004e06 <abort>
	...

08004dec <_ZSt13get_terminatev>:
 8004dec:	4b02      	ldr	r3, [pc, #8]	; (8004df8 <_ZSt13get_terminatev+0xc>)
 8004dee:	6818      	ldr	r0, [r3, #0]
 8004df0:	f3bf 8f5b 	dmb	ish
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	20000024 	.word	0x20000024

08004dfc <_ZSt9terminatev>:
 8004dfc:	b508      	push	{r3, lr}
 8004dfe:	f7ff fff5 	bl	8004dec <_ZSt13get_terminatev>
 8004e02:	f7ff ffee 	bl	8004de2 <_ZN10__cxxabiv111__terminateEPFvvE>

08004e06 <abort>:
 8004e06:	b508      	push	{r3, lr}
 8004e08:	2006      	movs	r0, #6
 8004e0a:	f000 f871 	bl	8004ef0 <raise>
 8004e0e:	2001      	movs	r0, #1
 8004e10:	f7fd fc30 	bl	8002674 <_exit>

08004e14 <__errno>:
 8004e14:	4b01      	ldr	r3, [pc, #4]	; (8004e1c <__errno+0x8>)
 8004e16:	6818      	ldr	r0, [r3, #0]
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	20000028 	.word	0x20000028

08004e20 <__libc_init_array>:
 8004e20:	b570      	push	{r4, r5, r6, lr}
 8004e22:	4e0d      	ldr	r6, [pc, #52]	; (8004e58 <__libc_init_array+0x38>)
 8004e24:	4c0d      	ldr	r4, [pc, #52]	; (8004e5c <__libc_init_array+0x3c>)
 8004e26:	1ba4      	subs	r4, r4, r6
 8004e28:	10a4      	asrs	r4, r4, #2
 8004e2a:	2500      	movs	r5, #0
 8004e2c:	42a5      	cmp	r5, r4
 8004e2e:	d109      	bne.n	8004e44 <__libc_init_array+0x24>
 8004e30:	4e0b      	ldr	r6, [pc, #44]	; (8004e60 <__libc_init_array+0x40>)
 8004e32:	4c0c      	ldr	r4, [pc, #48]	; (8004e64 <__libc_init_array+0x44>)
 8004e34:	f000 f960 	bl	80050f8 <_init>
 8004e38:	1ba4      	subs	r4, r4, r6
 8004e3a:	10a4      	asrs	r4, r4, #2
 8004e3c:	2500      	movs	r5, #0
 8004e3e:	42a5      	cmp	r5, r4
 8004e40:	d105      	bne.n	8004e4e <__libc_init_array+0x2e>
 8004e42:	bd70      	pop	{r4, r5, r6, pc}
 8004e44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e48:	4798      	blx	r3
 8004e4a:	3501      	adds	r5, #1
 8004e4c:	e7ee      	b.n	8004e2c <__libc_init_array+0xc>
 8004e4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e52:	4798      	blx	r3
 8004e54:	3501      	adds	r5, #1
 8004e56:	e7f2      	b.n	8004e3e <__libc_init_array+0x1e>
 8004e58:	08005358 	.word	0x08005358
 8004e5c:	08005358 	.word	0x08005358
 8004e60:	08005358 	.word	0x08005358
 8004e64:	08005360 	.word	0x08005360

08004e68 <memcpy>:
 8004e68:	b510      	push	{r4, lr}
 8004e6a:	1e43      	subs	r3, r0, #1
 8004e6c:	440a      	add	r2, r1
 8004e6e:	4291      	cmp	r1, r2
 8004e70:	d100      	bne.n	8004e74 <memcpy+0xc>
 8004e72:	bd10      	pop	{r4, pc}
 8004e74:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e7c:	e7f7      	b.n	8004e6e <memcpy+0x6>

08004e7e <memset>:
 8004e7e:	4402      	add	r2, r0
 8004e80:	4603      	mov	r3, r0
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d100      	bne.n	8004e88 <memset+0xa>
 8004e86:	4770      	bx	lr
 8004e88:	f803 1b01 	strb.w	r1, [r3], #1
 8004e8c:	e7f9      	b.n	8004e82 <memset+0x4>
	...

08004e90 <realloc>:
 8004e90:	4b02      	ldr	r3, [pc, #8]	; (8004e9c <realloc+0xc>)
 8004e92:	460a      	mov	r2, r1
 8004e94:	4601      	mov	r1, r0
 8004e96:	6818      	ldr	r0, [r3, #0]
 8004e98:	f000 b8a0 	b.w	8004fdc <_realloc_r>
 8004e9c:	20000028 	.word	0x20000028

08004ea0 <_raise_r>:
 8004ea0:	291f      	cmp	r1, #31
 8004ea2:	b538      	push	{r3, r4, r5, lr}
 8004ea4:	4604      	mov	r4, r0
 8004ea6:	460d      	mov	r5, r1
 8004ea8:	d904      	bls.n	8004eb4 <_raise_r+0x14>
 8004eaa:	2316      	movs	r3, #22
 8004eac:	6003      	str	r3, [r0, #0]
 8004eae:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb2:	bd38      	pop	{r3, r4, r5, pc}
 8004eb4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004eb6:	b112      	cbz	r2, 8004ebe <_raise_r+0x1e>
 8004eb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004ebc:	b94b      	cbnz	r3, 8004ed2 <_raise_r+0x32>
 8004ebe:	4620      	mov	r0, r4
 8004ec0:	f000 f830 	bl	8004f24 <_getpid_r>
 8004ec4:	462a      	mov	r2, r5
 8004ec6:	4601      	mov	r1, r0
 8004ec8:	4620      	mov	r0, r4
 8004eca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ece:	f000 b817 	b.w	8004f00 <_kill_r>
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d00a      	beq.n	8004eec <_raise_r+0x4c>
 8004ed6:	1c59      	adds	r1, r3, #1
 8004ed8:	d103      	bne.n	8004ee2 <_raise_r+0x42>
 8004eda:	2316      	movs	r3, #22
 8004edc:	6003      	str	r3, [r0, #0]
 8004ede:	2001      	movs	r0, #1
 8004ee0:	e7e7      	b.n	8004eb2 <_raise_r+0x12>
 8004ee2:	2400      	movs	r4, #0
 8004ee4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004ee8:	4628      	mov	r0, r5
 8004eea:	4798      	blx	r3
 8004eec:	2000      	movs	r0, #0
 8004eee:	e7e0      	b.n	8004eb2 <_raise_r+0x12>

08004ef0 <raise>:
 8004ef0:	4b02      	ldr	r3, [pc, #8]	; (8004efc <raise+0xc>)
 8004ef2:	4601      	mov	r1, r0
 8004ef4:	6818      	ldr	r0, [r3, #0]
 8004ef6:	f7ff bfd3 	b.w	8004ea0 <_raise_r>
 8004efa:	bf00      	nop
 8004efc:	20000028 	.word	0x20000028

08004f00 <_kill_r>:
 8004f00:	b538      	push	{r3, r4, r5, lr}
 8004f02:	4c07      	ldr	r4, [pc, #28]	; (8004f20 <_kill_r+0x20>)
 8004f04:	2300      	movs	r3, #0
 8004f06:	4605      	mov	r5, r0
 8004f08:	4608      	mov	r0, r1
 8004f0a:	4611      	mov	r1, r2
 8004f0c:	6023      	str	r3, [r4, #0]
 8004f0e:	f7fd fba1 	bl	8002654 <_kill>
 8004f12:	1c43      	adds	r3, r0, #1
 8004f14:	d102      	bne.n	8004f1c <_kill_r+0x1c>
 8004f16:	6823      	ldr	r3, [r4, #0]
 8004f18:	b103      	cbz	r3, 8004f1c <_kill_r+0x1c>
 8004f1a:	602b      	str	r3, [r5, #0]
 8004f1c:	bd38      	pop	{r3, r4, r5, pc}
 8004f1e:	bf00      	nop
 8004f20:	20000b14 	.word	0x20000b14

08004f24 <_getpid_r>:
 8004f24:	f7fd bb8e 	b.w	8002644 <_getpid>

08004f28 <_malloc_r>:
 8004f28:	b570      	push	{r4, r5, r6, lr}
 8004f2a:	1ccd      	adds	r5, r1, #3
 8004f2c:	f025 0503 	bic.w	r5, r5, #3
 8004f30:	3508      	adds	r5, #8
 8004f32:	2d0c      	cmp	r5, #12
 8004f34:	bf38      	it	cc
 8004f36:	250c      	movcc	r5, #12
 8004f38:	2d00      	cmp	r5, #0
 8004f3a:	4606      	mov	r6, r0
 8004f3c:	db01      	blt.n	8004f42 <_malloc_r+0x1a>
 8004f3e:	42a9      	cmp	r1, r5
 8004f40:	d903      	bls.n	8004f4a <_malloc_r+0x22>
 8004f42:	230c      	movs	r3, #12
 8004f44:	6033      	str	r3, [r6, #0]
 8004f46:	2000      	movs	r0, #0
 8004f48:	bd70      	pop	{r4, r5, r6, pc}
 8004f4a:	f000 f87d 	bl	8005048 <__malloc_lock>
 8004f4e:	4a21      	ldr	r2, [pc, #132]	; (8004fd4 <_malloc_r+0xac>)
 8004f50:	6814      	ldr	r4, [r2, #0]
 8004f52:	4621      	mov	r1, r4
 8004f54:	b991      	cbnz	r1, 8004f7c <_malloc_r+0x54>
 8004f56:	4c20      	ldr	r4, [pc, #128]	; (8004fd8 <_malloc_r+0xb0>)
 8004f58:	6823      	ldr	r3, [r4, #0]
 8004f5a:	b91b      	cbnz	r3, 8004f64 <_malloc_r+0x3c>
 8004f5c:	4630      	mov	r0, r6
 8004f5e:	f000 f863 	bl	8005028 <_sbrk_r>
 8004f62:	6020      	str	r0, [r4, #0]
 8004f64:	4629      	mov	r1, r5
 8004f66:	4630      	mov	r0, r6
 8004f68:	f000 f85e 	bl	8005028 <_sbrk_r>
 8004f6c:	1c43      	adds	r3, r0, #1
 8004f6e:	d124      	bne.n	8004fba <_malloc_r+0x92>
 8004f70:	230c      	movs	r3, #12
 8004f72:	6033      	str	r3, [r6, #0]
 8004f74:	4630      	mov	r0, r6
 8004f76:	f000 f868 	bl	800504a <__malloc_unlock>
 8004f7a:	e7e4      	b.n	8004f46 <_malloc_r+0x1e>
 8004f7c:	680b      	ldr	r3, [r1, #0]
 8004f7e:	1b5b      	subs	r3, r3, r5
 8004f80:	d418      	bmi.n	8004fb4 <_malloc_r+0x8c>
 8004f82:	2b0b      	cmp	r3, #11
 8004f84:	d90f      	bls.n	8004fa6 <_malloc_r+0x7e>
 8004f86:	600b      	str	r3, [r1, #0]
 8004f88:	50cd      	str	r5, [r1, r3]
 8004f8a:	18cc      	adds	r4, r1, r3
 8004f8c:	4630      	mov	r0, r6
 8004f8e:	f000 f85c 	bl	800504a <__malloc_unlock>
 8004f92:	f104 000b 	add.w	r0, r4, #11
 8004f96:	1d23      	adds	r3, r4, #4
 8004f98:	f020 0007 	bic.w	r0, r0, #7
 8004f9c:	1ac3      	subs	r3, r0, r3
 8004f9e:	d0d3      	beq.n	8004f48 <_malloc_r+0x20>
 8004fa0:	425a      	negs	r2, r3
 8004fa2:	50e2      	str	r2, [r4, r3]
 8004fa4:	e7d0      	b.n	8004f48 <_malloc_r+0x20>
 8004fa6:	428c      	cmp	r4, r1
 8004fa8:	684b      	ldr	r3, [r1, #4]
 8004faa:	bf16      	itet	ne
 8004fac:	6063      	strne	r3, [r4, #4]
 8004fae:	6013      	streq	r3, [r2, #0]
 8004fb0:	460c      	movne	r4, r1
 8004fb2:	e7eb      	b.n	8004f8c <_malloc_r+0x64>
 8004fb4:	460c      	mov	r4, r1
 8004fb6:	6849      	ldr	r1, [r1, #4]
 8004fb8:	e7cc      	b.n	8004f54 <_malloc_r+0x2c>
 8004fba:	1cc4      	adds	r4, r0, #3
 8004fbc:	f024 0403 	bic.w	r4, r4, #3
 8004fc0:	42a0      	cmp	r0, r4
 8004fc2:	d005      	beq.n	8004fd0 <_malloc_r+0xa8>
 8004fc4:	1a21      	subs	r1, r4, r0
 8004fc6:	4630      	mov	r0, r6
 8004fc8:	f000 f82e 	bl	8005028 <_sbrk_r>
 8004fcc:	3001      	adds	r0, #1
 8004fce:	d0cf      	beq.n	8004f70 <_malloc_r+0x48>
 8004fd0:	6025      	str	r5, [r4, #0]
 8004fd2:	e7db      	b.n	8004f8c <_malloc_r+0x64>
 8004fd4:	20000a08 	.word	0x20000a08
 8004fd8:	20000a0c 	.word	0x20000a0c

08004fdc <_realloc_r>:
 8004fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fde:	4607      	mov	r7, r0
 8004fe0:	4614      	mov	r4, r2
 8004fe2:	460e      	mov	r6, r1
 8004fe4:	b921      	cbnz	r1, 8004ff0 <_realloc_r+0x14>
 8004fe6:	4611      	mov	r1, r2
 8004fe8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004fec:	f7ff bf9c 	b.w	8004f28 <_malloc_r>
 8004ff0:	b922      	cbnz	r2, 8004ffc <_realloc_r+0x20>
 8004ff2:	f000 f82b 	bl	800504c <_free_r>
 8004ff6:	4625      	mov	r5, r4
 8004ff8:	4628      	mov	r0, r5
 8004ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ffc:	f000 f874 	bl	80050e8 <_malloc_usable_size_r>
 8005000:	42a0      	cmp	r0, r4
 8005002:	d20f      	bcs.n	8005024 <_realloc_r+0x48>
 8005004:	4621      	mov	r1, r4
 8005006:	4638      	mov	r0, r7
 8005008:	f7ff ff8e 	bl	8004f28 <_malloc_r>
 800500c:	4605      	mov	r5, r0
 800500e:	2800      	cmp	r0, #0
 8005010:	d0f2      	beq.n	8004ff8 <_realloc_r+0x1c>
 8005012:	4631      	mov	r1, r6
 8005014:	4622      	mov	r2, r4
 8005016:	f7ff ff27 	bl	8004e68 <memcpy>
 800501a:	4631      	mov	r1, r6
 800501c:	4638      	mov	r0, r7
 800501e:	f000 f815 	bl	800504c <_free_r>
 8005022:	e7e9      	b.n	8004ff8 <_realloc_r+0x1c>
 8005024:	4635      	mov	r5, r6
 8005026:	e7e7      	b.n	8004ff8 <_realloc_r+0x1c>

08005028 <_sbrk_r>:
 8005028:	b538      	push	{r3, r4, r5, lr}
 800502a:	4c06      	ldr	r4, [pc, #24]	; (8005044 <_sbrk_r+0x1c>)
 800502c:	2300      	movs	r3, #0
 800502e:	4605      	mov	r5, r0
 8005030:	4608      	mov	r0, r1
 8005032:	6023      	str	r3, [r4, #0]
 8005034:	f7fd fb28 	bl	8002688 <_sbrk>
 8005038:	1c43      	adds	r3, r0, #1
 800503a:	d102      	bne.n	8005042 <_sbrk_r+0x1a>
 800503c:	6823      	ldr	r3, [r4, #0]
 800503e:	b103      	cbz	r3, 8005042 <_sbrk_r+0x1a>
 8005040:	602b      	str	r3, [r5, #0]
 8005042:	bd38      	pop	{r3, r4, r5, pc}
 8005044:	20000b14 	.word	0x20000b14

08005048 <__malloc_lock>:
 8005048:	4770      	bx	lr

0800504a <__malloc_unlock>:
 800504a:	4770      	bx	lr

0800504c <_free_r>:
 800504c:	b538      	push	{r3, r4, r5, lr}
 800504e:	4605      	mov	r5, r0
 8005050:	2900      	cmp	r1, #0
 8005052:	d045      	beq.n	80050e0 <_free_r+0x94>
 8005054:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005058:	1f0c      	subs	r4, r1, #4
 800505a:	2b00      	cmp	r3, #0
 800505c:	bfb8      	it	lt
 800505e:	18e4      	addlt	r4, r4, r3
 8005060:	f7ff fff2 	bl	8005048 <__malloc_lock>
 8005064:	4a1f      	ldr	r2, [pc, #124]	; (80050e4 <_free_r+0x98>)
 8005066:	6813      	ldr	r3, [r2, #0]
 8005068:	4610      	mov	r0, r2
 800506a:	b933      	cbnz	r3, 800507a <_free_r+0x2e>
 800506c:	6063      	str	r3, [r4, #4]
 800506e:	6014      	str	r4, [r2, #0]
 8005070:	4628      	mov	r0, r5
 8005072:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005076:	f7ff bfe8 	b.w	800504a <__malloc_unlock>
 800507a:	42a3      	cmp	r3, r4
 800507c:	d90c      	bls.n	8005098 <_free_r+0x4c>
 800507e:	6821      	ldr	r1, [r4, #0]
 8005080:	1862      	adds	r2, r4, r1
 8005082:	4293      	cmp	r3, r2
 8005084:	bf04      	itt	eq
 8005086:	681a      	ldreq	r2, [r3, #0]
 8005088:	685b      	ldreq	r3, [r3, #4]
 800508a:	6063      	str	r3, [r4, #4]
 800508c:	bf04      	itt	eq
 800508e:	1852      	addeq	r2, r2, r1
 8005090:	6022      	streq	r2, [r4, #0]
 8005092:	6004      	str	r4, [r0, #0]
 8005094:	e7ec      	b.n	8005070 <_free_r+0x24>
 8005096:	4613      	mov	r3, r2
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	b10a      	cbz	r2, 80050a0 <_free_r+0x54>
 800509c:	42a2      	cmp	r2, r4
 800509e:	d9fa      	bls.n	8005096 <_free_r+0x4a>
 80050a0:	6819      	ldr	r1, [r3, #0]
 80050a2:	1858      	adds	r0, r3, r1
 80050a4:	42a0      	cmp	r0, r4
 80050a6:	d10b      	bne.n	80050c0 <_free_r+0x74>
 80050a8:	6820      	ldr	r0, [r4, #0]
 80050aa:	4401      	add	r1, r0
 80050ac:	1858      	adds	r0, r3, r1
 80050ae:	4282      	cmp	r2, r0
 80050b0:	6019      	str	r1, [r3, #0]
 80050b2:	d1dd      	bne.n	8005070 <_free_r+0x24>
 80050b4:	6810      	ldr	r0, [r2, #0]
 80050b6:	6852      	ldr	r2, [r2, #4]
 80050b8:	605a      	str	r2, [r3, #4]
 80050ba:	4401      	add	r1, r0
 80050bc:	6019      	str	r1, [r3, #0]
 80050be:	e7d7      	b.n	8005070 <_free_r+0x24>
 80050c0:	d902      	bls.n	80050c8 <_free_r+0x7c>
 80050c2:	230c      	movs	r3, #12
 80050c4:	602b      	str	r3, [r5, #0]
 80050c6:	e7d3      	b.n	8005070 <_free_r+0x24>
 80050c8:	6820      	ldr	r0, [r4, #0]
 80050ca:	1821      	adds	r1, r4, r0
 80050cc:	428a      	cmp	r2, r1
 80050ce:	bf04      	itt	eq
 80050d0:	6811      	ldreq	r1, [r2, #0]
 80050d2:	6852      	ldreq	r2, [r2, #4]
 80050d4:	6062      	str	r2, [r4, #4]
 80050d6:	bf04      	itt	eq
 80050d8:	1809      	addeq	r1, r1, r0
 80050da:	6021      	streq	r1, [r4, #0]
 80050dc:	605c      	str	r4, [r3, #4]
 80050de:	e7c7      	b.n	8005070 <_free_r+0x24>
 80050e0:	bd38      	pop	{r3, r4, r5, pc}
 80050e2:	bf00      	nop
 80050e4:	20000a08 	.word	0x20000a08

080050e8 <_malloc_usable_size_r>:
 80050e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050ec:	1f18      	subs	r0, r3, #4
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	bfbc      	itt	lt
 80050f2:	580b      	ldrlt	r3, [r1, r0]
 80050f4:	18c0      	addlt	r0, r0, r3
 80050f6:	4770      	bx	lr

080050f8 <_init>:
 80050f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050fa:	bf00      	nop
 80050fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050fe:	bc08      	pop	{r3}
 8005100:	469e      	mov	lr, r3
 8005102:	4770      	bx	lr

08005104 <_fini>:
 8005104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005106:	bf00      	nop
 8005108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800510a:	bc08      	pop	{r3}
 800510c:	469e      	mov	lr, r3
 800510e:	4770      	bx	lr
